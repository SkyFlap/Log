2024-12-15 16:13:53,068 - INFO Retriever 0 - Init Retriever.
2024-12-15 16:14:21,325 - INFO Retriever 0 - keywords:“['warfare', '战斗', 'skill', 'battle animation', '固定', 'character', 'stuck', '动画', '技能招式', 'combat animation', 'move', 'battle', 'talent', 'skill move', '招式', 'fixed', 'role', '技能', 'animation', '战斗动画', '角色']”，“['warfare', '战斗', 'skill', 'battle animation', '固定', 'character', 'stuck', '动画', '技能招式', 'combat animation', 'move', 'battle', 'talent', 'skill move', '招式', 'fixed', 'role', '技能', 'animation', '战斗动画', '角色']”，“['warfare', '战斗', 'skill', 'battle animation', '固定', 'character', 'stuck', '动画', '技能招式', 'combat animation', 'move', 'battle', 'talent', 'skill move', '招式', 'fixed', 'role', '技能', 'animation', '战斗动画', '角色']”
2024-12-15 16:14:21,326 - INFO Retriever 0 - deep_think_conent
:在获取了项目文件的顶层结构后，我还需要结合待查询的问题描述，对于项目中的文件和目录进行一些深度关键词检索。根据任务描述：“请在D:/Unity/jyx2\Assets下各级目录中寻找：我想指定某个角色的所有战斗动画为固定的,而不是跟随技能招式变化应该修改哪个脚本”，我总结出如下可能会出现在各个文件名或者文件内容中的关键词：“['warfare', '战斗', 'skill', 'battle animation', '固定', 'character', 'stuck', '动画', '技能招式', 'combat animation', 'move', 'battle', 'talent', 'skill move', '招式', 'fixed', 'role', '技能', 'animation', '战斗动画', '角色']”，“['warfare', '战斗', 'skill', 'battle animation', '固定', 'character', 'stuck', '动画', '技能招式', 'combat animation', 'move', 'battle', 'talent', 'skill move', '招式', 'fixed', 'role', '技能', 'animation', '战斗动画', '角色']”，“['warfare', '战斗', 'skill', 'battle animation', '固定', 'character', 'stuck', '动画', '技能招式', 'combat animation', 'move', 'battle', 'talent', 'skill move', '招式', 'fixed', 'role', '技能', 'animation', '战斗动画', '角色']”。
接下来，我将使用retrieve_keywords操作，在项目顶层路径“D:/Unity/jyx2\Assets”下检索这些关键词，从而大致把握可能与问题描述相关的文件或目录的路径。
2024-12-15 16:14:21,327 - INFO Retriever 0 - ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
2024-12-15 16:14:21,327 - INFO Retriever 0 - Assistant:
2024-12-15 16:14:21,327 - INFO Retriever 0 - {
    "deep_think": {
        "thoughts": "好的，接下来我将通过深度思考、仔细计划以及逐步执行的方式，来完成该任务。\n\n首先，在阅读详细的代码细节之前，应该先整体把握整个项目。\n\n在提供的可选的action中，可以通过get_folder_info操作，通过将项目顶层路径作为target_folder_path参数进行传入，来获取获取项目中主要文件夹和主要文件的描述，从而能够先大致把握项目文件的主要文件的文件树结构、基本内容、主要代码概述以及大致功能板块的分布。"
    }
}
2024-12-15 16:14:21,328 - INFO Retriever 0 - 
Observer:
2024-12-15 16:14:21,328 - INFO Retriever 0 - 好的，请继续你的下一步行动或思考。
2024-12-15 16:14:21,328 - INFO Retriever 0 - 
2024-12-15 16:14:21,393 - INFO Retriever 0 - ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
2024-12-15 16:14:21,394 - INFO Retriever 0 - Assistant:
2024-12-15 16:14:21,395 - INFO Retriever 0 - {
    "get_folder_info": {
        "target_folder_path": "D:/Unity/jyx2\\Assets"
    }
}
2024-12-15 16:14:21,396 - INFO Retriever 0 - 
Observer:
2024-12-15 16:14:21,397 - INFO Retriever 0 - 目标文件夹路径：D:/Unity/jyx2\Assets
文件结构树（该结构树可能不完整，仅返回深度小于等于1层的子文件以及文件夹）：
├── 3D
│   ├── Animal pack deluxe
│   ...
│   ├── juese2
├── 3DScene
│   ├── Animation
│   ├── COMMUNITY_LICENSE_FOR_JYX2.md
│   ...
│   ├── timg.jpg
├── 3rd
│   ├── AmplifyShaderEditor
│   ├── Animancer
│   ...
│   ├── xNode-1.8.0
├── BuildSource
│   ├── AnimationControllers
│   ├── Animations
│   ...
│   ├── sound
├── Easy Save 3
│   ├── Types
├── Editor
│   ├── .DS_Store
│   ├── AddScenesToBuild.cs
│   ...
│   ├── ToolbarExtender
├── Gizmos
├── IFix
│   ├── Editor
├── Jyx2Tools
├── Jyx2UI
│   ├── Res
│   ├── gameicon1.png
│   ...
│   ├── theend.png
├── LuaScripts
│   ├── InitLuaScripts.lua
│   ├── Jyx2Battle
│   ...
│   ├── testLua.lua
├── Mods
│   ├── .gitignore
│   ├── JYX2
│   ├── README.txt
│   ├── SAMPLE
│   ├── xiastart_roguelike
├── Plugins
│   ├── 3rd
│   ├── Android
│   ...
│   ├── xlua.bundle
├── Prefabs
│   ├── BattleRole.prefab
│   ├── BattleboxBlock.prefab
│   ...
│   ├── StorySelectionItem.prefab
├── Resources
│   ├── ABMD5.txt
│   ├── BattleboxBlock.prefab
│   ...
│   ├── icon.jpg
├── Scripts
│   ├── AudioManager.cs
│   ├── BattleBlockData.cs
│   ...
│   ├── VCamManage
├── StaticBakeObj.shader
├── StreamingAssets
│   ├── build_info
├── TapTap
├── TapTapSlogan.png
├── Terrain
│   ├── Terrain Mat.mat
│   ├── Terrain_0_0-20210221-192230.asset
│   ├── Terrain_Copy.asset
├── Terrain2Mesh
│   ├── NewMeshTerrain2
│   ├── NewMeshTerrain3
│   ...
│   ├── Terrain_LOD_2.obj
├── VFX
│   ├── DragonVFX
│   ├── EffectsPackage
│   ├── Hovl Studio
│   ├── JMO Assets
│   ├── Jyx2Effect
│   ├── Toon_Explosion_V1
│   ├── UNAUTH_ASSETS_FOR_JYX2.md
├── XLua
│   ├── CHANGELOG.txt
│   ├── Doc
│   ...
│   ├── util
├── _TerrainAutoUpgrade
│   ├── layer_119f68b03b8b7e8e.terrainlayer
│   ├── layer_793646612c42751.terrainlayer
│   ...
│   ├── layer_stone3d3aba195e4d26ee.terrainlayer
├── csc.rsp
├── icon.jpg
├── link.xml
├── mcs.rsp


其中，部分主要文件及文件夹的信息如下：
1. 3D
# 路径:D:/Unity/jyx2/Assets\3D
# 内容概述:### 文件夹内容概览

“3D”文件夹汇集了丰富的游戏和动画开发资源，包括3D模型、动画、脚本和图片等。其中，**Animation**、**ImportedRoleModels**、**Jyx2RoleModels**等子文件夹提供了角色和动画资源，**Model**则专注于武器和乐器模型。此外，**Editor**文件夹包含编辑和设计用图，**Script**文件夹提供Unity脚本支持特效，而**COMMUNITY_LICENSE_FOR_JYX2.md**文件则明确了资源的使用授权。整体资源库旨在支持游戏开发与动画制作项目。

2. 3DScene
# 路径:D:/Unity/jyx2/Assets\3DScene
# 内容概述:### 文件夹内容总结

“3DScene”文件夹汇集了丰富的资源，专为游戏开发与视觉效果设计。它包含动画与控制文件，如“Animation”和“camera.anim”，用于UI元素和相机运动；3D建模与Unity预制件，如“Model”和“TileWorldCreator”，用于构建游戏场景；视觉效果资源，包括Shader、天空盒和后处理效果，如“Shader”、“SkyBox”和“Post_Processing”；以及风格化纹理和材质，如“Stylized Ground Textures”和“New Material”。此外，文件夹中还包含授权声明文件“COMMUNITY_LICENSE_FOR_JYX2.md”，确保了所有资源的合法使用。

3. 3rd
# 路径:D:/Unity/jyx2/Assets\3rd
# 内容概述:该文件“UNAUTH_ASSETS_FOR_JYX2.md”是金庸群侠传3D重制版项目的版权声明，明确指出项目内部分素材未经授权，并鼓励用户在发现版权问题时应联系项目方。文件同时强调，此声明仅限于项目本身，其他使用场景不受影响，并要求用户在使用时遵守版权规范。

4. BuildSource
# 路径:D:/Unity/jyx2/Assets\BuildSource
# 内容概述:“BuildSource”文件夹是金庸群侠传3D重制版项目的核心资源库，汇集了动画控制器配置、角色与武器模型、动画资源、音效、音乐、用户界面设计等文件。其中，动画控制器和动画资源支持游戏中的角色动作，音效和音乐文件为游戏增色添彩，用户界面设计则优化了玩家交互体验。此外，文件夹还包含了Lua脚本文件，用于游戏逻辑开发，以及授权声明和技能动画标准文档，确保项目合规与开发质量。

5. Easy Save 3
# 路径:D:/Unity/jyx2/Assets\Easy Save 3
# 内容概述:### 文件夹内容总结

“Easy Save 3”文件夹汇集了Unity游戏开发中的数据序列化脚本，包含针对角色、技能、地图等游戏对象的序列化和反序列化类，旨在实现游戏数据的持久化管理。文件夹内各文件如`ES3UserType_CsRoleItem.cs`等，均专注于特定对象的序列化逻辑，共同构建了一个高效的数据保存与恢复系统。

6. Editor
# 路径:D:/Unity/jyx2/Assets\Editor
# 内容概述:“Editor”文件夹汇集了多种Unity编辑器扩展工具，旨在提升项目开发效率。它包含动画配置工具、贴图格式检查器、构建自动化工具、热更新配置脚本、资源引用查找器、工具栏扩展、场景切换工具等，每个工具都针对特定需求设计，如优化动画、管理资源、简化构建流程等。此外，还包含一些辅助脚本，如添加场景到构建、修复MOD问题、自定义菜单项等，共同构成了一个功能丰富的编辑器工具集合。

7. Gizmos
# 路径:D:/Unity/jyx2/Assets\Gizmos
# 内容概述:该文件夹内容为空。

8. IFix
# 路径:D:/Unity/jyx2/Assets\IFix
# 内容概述:“IFix”文件夹汇集了Unity编辑器脚本，专注于热修复功能。其中，`Configure.cs`负责通过反射管理配置信息，而`ILFixEditor.cs`作为编辑器插件，利用这些配置信息执行版本选择、注入、备份等热修复操作。

9. Jyx2Tools
# 路径:D:/Unity/jyx2/Assets\Jyx2Tools
# 内容概述:“Jyx2Tools”文件夹汇集了一系列工具和资源，旨在提升工作效率和辅助特定项目。该文件夹内包含如配置文件、用户手册等子文件，以及示例代码、测试数据和更新日志等子文件夹，各部分内容相互关联，共同构成了一个结构化的工具集，便于用户快速定位和使用所需资源。

10. Jyx2UI
# 路径:D:/Unity/jyx2/Assets\Jyx2UI
# 内容概述:### 文件夹内容总结

“Jyx2UI”文件夹汇集了游戏或应用UI设计的视觉资源，包括“Decal”子文件夹中的游戏贴图和预制体，以及“Textures”子文件夹中的颜色纹理图像。此外，文件夹内还包含多个图标文件，如游戏图标、主菜单和结束界面图像，这些图标用于界面中的不同功能展示，与UI设计紧密相关。整体上，这些资源共同构成了项目的视觉元素库。

11. LuaScripts
# 路径:D:/Unity/jyx2/Assets\LuaScripts
# 内容概述:### 文件夹内容概述
“LuaScripts”文件夹是金庸群侠传3D重制版游戏开发的核心，内含多个子目录，分别针对战斗逻辑、配置管理、辅助工具等游戏功能。其中，**Jyx2Battle**负责战斗AI和伤害计算，**Jyx2Configs**管理游戏配置和地图信息，**Jyx2RuntimeData**暂无内容。**InitLuaScripts.lua**初始化脚本模块，**Jyx2Coroutine.lua**和**Jyx2Utils.lua**提供开发辅助，**LuaClass.lua**和**LuaModuleList.lua**支持面向对象编程和模块管理。此外，**LuaTestStarter.asset**和**README.md**分别用于测试和文档说明。

12. Mods
# 路径:D:/Unity/jyx2/Assets\Mods
# 内容概述:### 文件夹内容概要
“Mods”文件夹是游戏开发资源库，包含更新日志、配置文件、Lua脚本、地图、模型、预制件、技能设置等，旨在支持游戏功能实现和用户体验优化。它结构清晰，涵盖游戏开发所需的各种资源，如“SAMPLE”和“xiastart_roguelike”子文件夹提供额外资源，而“.gitignore”和“README.txt”则分别管理文件跟踪和提供开发指南。

13. Plugins
# 路径:D:/Unity/jyx2/Assets\Plugins
# 内容概述:“IFix.Core.dll”和“protobuf-net.dll”均为.dll文件，分别用于实现IFix数据交换标准和Google Protocol Buffers的序列化功能。这两个文件可能共同集成于应用程序中，以支持高效的数据通信和格式化处理，适用于工业自动化和通用数据管理场景。

14. Prefabs
# 路径:D:/Unity/jyx2/Assets\Prefabs
# 内容概述:### 文件夹内容概要

“BattleboxBlock”文件夹汇集了多种游戏开发资源，包括用于战斗场景和角色设计的预制体文件，如“BattleboxBlock.prefab”和“BattleRole.prefab”，以及UI组件如“Jyx2ItemUI.prefab”和“Jyx2RoleHeadUI.prefab”。此外，文件夹还包含调试工具和动画文件，如“DebugPanel.prefab”和“CurrentBattleRoleTag.anim”。特别需要注意的是，“LICENSE_FOR_JYX2.txt”文件规定了文件夹内容的授权使用范围。

15. Resources
# 路径:D:/Unity/jyx2/Assets\Resources
# 内容概述:“RewiredInputManager.prefab”是Unity中用于集成Rewired插件的关键预制体，内置了Rewired输入管理器组件，便于开发者实现自定义输入配置和映射，从而增强游戏的输入控制灵活性。

16. Scripts
# 路径:D:/Unity/jyx2/Assets\Scripts
# 内容概述:当然可以。以下是对上述文件夹内容的融合总结：

该文件夹集合了多个Unity游戏开发脚本，涵盖了游戏的核心功能，包括战斗区域管理（Battlebox）、地图交互（MapInteract）、战斗逻辑（BattleField、BattleManager）、资源管理（ResourceManagement）、用户界面（Jyx2UIScripts、UIComponents）、音频管理（AudioManager）、存档管理（GameSave）、视角控制（VCamManage）以及辅助工具（Tools、Helpers）。这些脚本共同构成了游戏的基础架构，实现了角色控制、战斗系统、UI交互、资源加载、音效处理和存档保存等功能，确保了游戏的流畅运行和玩家体验。

17. StreamingAssets
# 路径:D:/Unity/jyx2/Assets\StreamingAssets
# 内容概述:“StreamingAssets”文件夹主要存放流媒体资源，其中包含的“build_info”文件记录了资源的构建信息，用于管理和分发相关内容。

18. TapTap
# 路径:D:/Unity/jyx2/Assets\TapTap
# 内容概述:该文件夹内容为空。

19. Terrain
# 路径:D:/Unity/jyx2/Assets\Terrain
# 内容概述:“Terrain”文件夹汇集了与地形相关的文件，主要用于存储地形数据。其中包含两个Asset文件“Terrain_0_0-20210221-192230.asset”和“Terrain_Copy.asset”，均涉及地形数据但解码时出现编码错误，而“Terrain Mat.mat”文件的具体内容不明。

20. Terrain2Mesh
# 路径:D:/Unity/jyx2/Assets\Terrain2Mesh
# 内容概述:### 文件夹内容总结

“Terrain2Mesh”文件夹汇集了与3D地形设计相关的资源，包括OBJ格式的地形基础几何数据（如NewMeshTerrain2.obj），Unity预制体文件（如NewMeshTerrain2.prefab），用于不同细节级别的LOD地形文件（如TerrainLOD.FBX），以及相关材质文件（如Terrain2Mesh.mat）。这些文件共同构成了一个完整的地形资源包，适用于游戏开发或3D动画制作。

21. VFX
# 路径:D:/Unity/jyx2/Assets\VFX
# 内容概述:### 文件夹内容概览

“VFX”文件夹汇集了多样化的游戏和视觉效果资源，包括3D模型、动画、特效素材、Unity插件和音效等，旨在支持动画、游戏开发及视觉效果制作。其中，**DragonVFX**和**Hovl Studio**等子文件夹提供了详细的3D模型、动画和场景资源，而**JMO Assets**和**Jyx2Effect**则专注于视觉效果和Unity开发工具。此外，文件夹内还包含版权声明文件，提醒用户注意授权和使用规范。

22. XLua
# 路径:D:/Unity/jyx2/Assets\XLua
# 内容概述:“XLua”文件夹是Unity游戏开发中C#与Lua集成的重要资源库，内含详细的使用指南、配置文件、示例代码、工具库和教程，涵盖了从基础配置到高级功能如热修复的全面内容。其中，`Doc`提供配置指南，`Examples`展示实践案例，`Tutorial`提供集成教程，`Src`和`Gen`包含核心代码，`Resources`提供辅助工具，而`util`则提供了加密支持。此外，`CHANGELOG.txt`记录了库的更新历史，帮助开发者跟踪库的演变。这些资源共同构成了一个完整的学习和使用xLua库的生态系统。

23. _TerrainAutoUpgrade
# 路径:D:/Unity/jyx2/Assets\_TerrainAutoUpgrade
# 内容概述:该“_TerrainAutoUpgrade”文件夹汇集了多种地形层文件，用于地形编辑和升级。文件名如“layer_119f68b03b8b7e8e.terrainlayer”等，揭示了不同地形类型（如草地、山地、石质、沙质）和纹理细节，共同构建一个全面的地形环境，适用于游戏或虚拟现实项目。

24. 0_GameStart.unity
# 路径:D:/Unity/jyx2/Assets\0_GameStart.unity
# 内容概述:这是一个名为“0_GameStart.unity”的文件。

25. 0_Init.unity
# 路径:D:/Unity/jyx2/Assets\0_Init.unity
# 内容概述:这是一个名为“0_Init.unity”的文件。

26. 0_MainMenu.unity
# 路径:D:/Unity/jyx2/Assets\0_MainMenu.unity
# 内容概述:这是一个名为“0_MainMenu.unity”的文件。

27. 0_MODLoaderScene.unity
# 路径:D:/Unity/jyx2/Assets\0_MODLoaderScene.unity
# 内容概述:这是一个名为“0_MODLoaderScene.unity”的文件。

28. csc.rsp
# 路径:D:/Unity/jyx2/Assets\csc.rsp
# 内容概述:这是一个名为“csc.rsp”的文件。

29. icon.jpg
# 路径:D:/Unity/jyx2/Assets\icon.jpg
# 内容概述:这是一个名为“icon.jpg”的文件。

30. link.xml
# 路径:D:/Unity/jyx2/Assets\link.xml
# 内容概述:这是一个名为“link.xml”的文件。

31. mcs.rsp
# 路径:D:/Unity/jyx2/Assets\mcs.rsp
# 内容概述:这是一个名为“mcs.rsp”的文件。

32. StaticBakeObj.shader
# 路径:D:/Unity/jyx2/Assets\StaticBakeObj.shader
# 内容概述:该Shader文件“StaticBakeObj.shader”为Unity游戏引擎中的材质提供定制化渲染效果。它定义了多个属性，如轮廓颜色、纹理和光照参数，并通过多个SubShader实现不同的渲染策略。每个SubShader包含属性设置、细节级别、剔除方向和着色器代码，后者通过Cg语言定义了顶点和片元处理逻辑，包括轮廓效果和光照计算。整体上，该Shader旨在为物体提供丰富的视觉效果，如轮廓边框、动态光照和纹理映射。


33. TapTapSlogan.png
# 路径:D:/Unity/jyx2/Assets\TapTapSlogan.png
# 内容概述:这是一个名为“TapTapSlogan.png”的文件。


2024-12-15 16:14:21,402 - INFO Retriever 0 - 
2024-12-15 16:14:21,406 - INFO Retriever 0 - ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
2024-12-15 16:14:21,407 - INFO Retriever 0 - Assistant:
2024-12-15 16:14:21,417 - INFO Retriever 0 - {
    "deep_think": {
        "thoughts": "在获取了项目文件的顶层结构后，我还需要结合待查询的问题描述，对于项目中的文件和目录进行一些深度关键词检索。根据任务描述：“请在D:/Unity/jyx2\\Assets下各级目录中寻找：我想指定某个角色的所有战斗动画为固定的,而不是跟随技能招式变化应该修改哪个脚本”，我总结出如下可能会出现在各个文件名或者文件内容中的关键词：“['warfare', '战斗', 'skill', 'battle animation', '固定', 'character', 'stuck', '动画', '技能招式', 'combat animation', 'move', 'battle', 'talent', 'skill move', '招式', 'fixed', 'role', '技能', 'animation', '战斗动画', '角色']”，“['warfare', '战斗', 'skill', 'battle animation', '固定', 'character', 'stuck', '动画', '技能招式', 'combat animation', 'move', 'battle', 'talent', 'skill move', '招式', 'fixed', 'role', '技能', 'animation', '战斗动画', '角色']”，“['warfare', '战斗', 'skill', 'battle animation', '固定', 'character', 'stuck', '动画', '技能招式', 'combat animation', 'move', 'battle', 'talent', 'skill move', '招式', 'fixed', 'role', '技能', 'animation', '战斗动画', '角色']”。\n接下来，我将使用retrieve_keywords操作，在项目顶层路径“D:/Unity/jyx2\\Assets”下检索这些关键词，从而大致把握可能与问题描述相关的文件或目录的路径。"
    }
}
2024-12-15 16:14:21,426 - INFO Retriever 0 - 
Observer:
2024-12-15 16:14:21,427 - INFO Retriever 0 - 好的，请继续你的下一步行动或思考。
2024-12-15 16:14:21,429 - INFO Retriever 0 - 
2024-12-15 16:14:21,432 - INFO Retriever 0 - ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
2024-12-15 16:14:21,432 - INFO Retriever 0 - Assistant:
2024-12-15 16:14:21,433 - INFO Retriever 0 - {
    "retrieve_keywords": {
        "keyword_list": [
            [
                "warfare",
                "战斗",
                "skill",
                "battle animation",
                "固定",
                "character",
                "stuck",
                "动画",
                "技能招式",
                "combat animation",
                "move",
                "battle",
                "talent",
                "skill move",
                "招式",
                "fixed",
                "role",
                "技能",
                "animation",
                "战斗动画",
                "角色"
            ],
            [
                "warfare",
                "战斗",
                "skill",
                "battle animation",
                "固定",
                "character",
                "stuck",
                "动画",
                "技能招式",
                "combat animation",
                "move",
                "battle",
                "talent",
                "skill move",
                "招式",
                "fixed",
                "role",
                "技能",
                "animation",
                "战斗动画",
                "角色"
            ],
            [
                "warfare",
                "战斗",
                "skill",
                "battle animation",
                "固定",
                "character",
                "stuck",
                "动画",
                "技能招式",
                "combat animation",
                "move",
                "battle",
                "talent",
                "skill move",
                "招式",
                "fixed",
                "role",
                "技能",
                "animation",
                "战斗动画",
                "角色"
            ]
        ]
    }
}
2024-12-15 16:14:21,434 - INFO Retriever 0 - 
Observer:
2024-12-15 16:14:21,436 - INFO Retriever 0 - * 文件一：
    * 文件绝对路径：D:\Unity\jyx2\Assets\Scripts\GameSave\RoleInstance.cs
    * 文件内容概述：该脚本定义了`RoleInstance`类，作为金庸群侠传3D重制版中角色的核心模型，包含了角色的属性、技能和装备信息，并提供了属性管理、技能学习、装备使用、战斗状态处理等功能。
    * 是否与问题相关：是
    * 具体分析：由于该脚本涉及到角色的技能和战斗状态处理，很可能包含了指定角色战斗动画的逻辑。需要进一步检查该脚本中是否有关于动画的设置和修改。

* 文件二：
    * 文件绝对路径：D:\Unity\jyx2\Assets\3rd\Animancer\Internal\Core\AnimancerState.cs
    * 文件内容概述：该脚本定义了`AnimancerState`类，作为`Animancer`框架中所有动画状态的基础，负责管理动画的播放、暂停、时间控制等。
    * 是否与问题相关：是
    * 具体分析：由于该脚本直接涉及到动画状态的管理，很可能包含了指定角色战斗动画的逻辑。需要进一步检查该脚本中是否有关于动画的设置和修改。

* 文件三：
    * 文件绝对路径：D:\Unity\jyx2\Assets\Scripts\BattleField\AIResult.cs
    * 文件内容概述：该脚本文件包含`AIResult`和`SkillCastResult`两个类，分别负责记录和比较AI行为以及处理技能施放的具体结果。
    * 是否与问题相关：否
    * 具体分析：虽然该脚本涉及到AI行为和技能施放，但与指定角色战斗动画的逻辑关系不大，因此可以排除。

* 文件四：
    * 文件绝对路径：D:\Unity\jyx2\Assets\Mods\JYX2\Lua\ka363.lua
    * 文件内容概述：该Lua脚本控制游戏中的特定场景，包含场景切换、角色对话、物品添加和事件修改等功能。
    * 是否与问题相关：否
    * 具体分析：该脚本与指定角色战斗动画的逻辑关系不大，因此可以排除。
2024-12-15 16:14:21,436 - INFO Retriever 0 - 
2024-12-15 16:14:36,883 - INFO Retriever 0 - Agent主脑给出的回答为：根据检索结果，我找到了两个可能与问题描述相关的文件：`RoleInstance.cs` 和 `AnimancerState.cs`。接下来，我将分别读取这两个文件的内容，以便进一步分析它们是否包含指定角色战斗动画的逻辑。

```json
[
    {
        "read_file": {
            "file_path": "D:\\Unity\\jyx2\\Assets\\Scripts\\GameSave\\RoleInstance.cs"
        }
    },
    {
        "read_file": {
            "file_path": "D:\\Unity\\jyx2\\Assets\\3rd\\Animancer\\Internal\\Core\\AnimancerState.cs"
        }
    }
]
```
2024-12-15 16:14:36,883 - INFO Retriever 0 - 是否成功解析：False
2024-12-15 16:14:36,883 - INFO Retriever 0 - 

————————————————————————————————————————————————————————————————
2024-12-15 16:14:36,883 - INFO Retriever 0 - 当前窗口总长度：9
2024-12-15 16:14:36,883 - INFO Retriever 0 - 当前更新窗口长度：0
2024-12-15 16:14:36,884 - INFO Retriever 0 - 当前更新窗口长度：0
2024-12-15 16:14:36,884 - INFO Retriever 0 - ————————————————————————————————————————————————————————————————


2024-12-15 16:14:45,414 - INFO Retriever 0 - Agent主脑给出的回答为：根据检索结果，有两个文件可能与指定角色战斗动画的逻辑相关，分别是`RoleInstance.cs`和`AnimancerState.cs`。接下来，我将分别读取这两个文件的内容，以确定是否包含指定角色战斗动画的逻辑。

读取文件一`RoleInstance.cs`的内容。
2024-12-15 16:14:45,414 - INFO Retriever 0 - 是否成功解析：True
2024-12-15 16:14:45,414 - INFO Retriever 0 - 

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
2024-12-15 16:14:45,414 - INFO Retriever 0 - Assistant:
2024-12-15 16:14:45,414 - INFO Retriever 0 - {
  "根据检索结果，有两个文件可能与指定角色战斗动画的逻辑相关，分别是`RoleInstance.cs`和`AnimancerState.cs`。": "接下来，我将分别读取这两个文件的内容，以确定是否包含指定角色战斗动画的逻辑。",
  "读取文件一`RoleInstance.cs`的内容。": ""
}
2024-12-15 16:14:45,414 - INFO Retriever 0 - dict_keys(['根据检索结果，有两个文件可能与指定角色战斗动画的逻辑相关，分别是`RoleInstance.cs`和`AnimancerState.cs`。', '读取文件一`RoleInstance.cs`的内容。'])
2024-12-15 16:14:45,414 - WARNING Retriever 0 - Agent主脑给出的回答为：
2024-12-15 16:14:45,416 - WARNING Retriever 0 - {
  "根据检索结果，有两个文件可能与指定角色战斗动画的逻辑相关，分别是`RoleInstance.cs`和`AnimancerState.cs`。": "接下来，我将分别读取这两个文件的内容，以确定是否包含指定角色战斗动画的逻辑。",
  "读取文件一`RoleInstance.cs`的内容。": ""
}
2024-12-15 16:14:45,416 - WARNING Retriever 0 - 该回答不符合格式要求，需重新生成。
2024-12-15 16:14:45,417 - INFO Retriever 0 - 

————————————————————————————————————————————————————————————————
2024-12-15 16:14:45,417 - INFO Retriever 0 - 当前窗口总长度：11
2024-12-15 16:14:45,417 - INFO Retriever 0 - 当前更新窗口长度：2
2024-12-15 16:14:45,417 - INFO Retriever 0 - 当前更新窗口长度：2
2024-12-15 16:14:45,418 - INFO Retriever 0 - ————————————————————————————————————————————————————————————————


2024-12-15 16:14:48,527 - INFO Retriever 0 - Agent主脑给出的回答为：{
    "read_file": {
        "file_path": "D:\\Unity\\jyx2\\Assets\\Scripts\\GameSave\\RoleInstance.cs"
    }
}
2024-12-15 16:14:48,527 - INFO Retriever 0 - 是否成功解析：True
2024-12-15 16:14:48,527 - INFO Retriever 0 - operation_type (__det_dir_action):
2024-12-15 16:14:48,528 - INFO Retriever 0 - read_file
2024-12-15 16:14:48,528 - INFO Retriever 0 - 

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
2024-12-15 16:14:48,528 - INFO Retriever 0 - Assistant:
2024-12-15 16:14:48,528 - INFO Retriever 0 - {
    "read_file": {
        "file_path": "D:\\Unity\\jyx2\\Assets\\Scripts\\GameSave\\RoleInstance.cs"
    }
}
2024-12-15 16:14:48,528 - INFO Retriever 0 - dict_keys(['read_file'])
2024-12-15 16:14:48,529 - INFO Retriever 0 - Agent主脑给出的行动：read_file
参数：{'file_path': 'D:\\Unity\\jyx2\\Assets\\Scripts\\GameSave\\RoleInstance.cs', 'top_path': 'D:/Unity/jyx2\\Assets', 'return_file_sum': <bound method TreeGenerationAction.return_file_sum of <Action.tree_gen_action.TreeGenerationAction object at 0x000001A807224BD0>>}
2024-12-15 16:14:48,592 - INFO Retriever 0 - Observer: 这是一个名为“RoleInstance.cs”的文件，该文件里的内容为：
由于脚本文件内容过长，暂时仅给出该脚本文件的内容总结:
- ### 脚本内容总结

#### 1. 总体概述
- **框架和模块化结构**：该脚本定义了一个名为 `RoleInstance` 的类，用于表示金庸群侠传3D重制版游戏中的角色实例。类中包含了角色的属性、技能、装备等信息，并提供了相应的操作方法。
- **主要功能和目标**：该脚本的主要目标是实现角色的创建、初始化、属性管理、技能学习、装备使用等功能，以支持游戏中的角色扮演和战斗系统。

#### 2. 模块和功能
- **角色属性管理**：包含角色的基本属性（如ID、姓名、等级、经验、攻击力等）和特殊属性（如内力、体力、生命值等）。
- **技能管理**：管理角色的技能列表，包括技能的初始化、学习、升级等。
- **装备管理**：管理角色的装备列表，包括武器的获取、使用、卸载等。
- **战斗相关**：处理角色的战斗状态，包括进入战斗、退出战斗、行动力管理、晕眩状态等。
- **状态管理**：处理角色的各种状态，如死亡、复活、晕眩等。

#### 3. 类和函数
- **类**：`RoleInstance`
  - **作用**：表示游戏中的角色实例。
  - **关键功能**：属性管理、技能管理、装备管理、战斗状态管理、状态管理。
- **函数**：
  - `BindKey()`：绑定角色ID，加载角色数据。
  - `InitData()`：初始化角色数据。
  - `ResetForBattle()`：为战斗重置角色状态。
  - `Recover()`：恢复角色状态。
  - `LevelUp()`：角色升级。
  - `LimitAllAttrs()`：限制所有属性范围。
  - `GetSkillsList()`：获取角色技能列表。
  - `ResetItems()`：重置角色物品列表。
  - `AddItem()`：为角色添加物品。
  - `CanUseItem()`：判断角色是否可以使用道具。
  - `LianZhiItem()`：炼制物品。
  - `UseItem()`：使用物品。
  - `UnequipItem()`：卸下物品。
  - `EnterBattle()`：进入战斗。
  - `LeaveBattle()`：退出战斗。
  - `TimeRun()`：时间运行。
  - `IncSp()`：集气槽增长。
  - `GetMoveAbility()`：获取移动能力。
  - `Stun()`：晕眩。
  - `StopStun()`：停止晕眩。
  - `OnRest()`：休息逻辑。
  - `LearnMagic()`：学习武学。

#### 4. 实现逻辑
- **初始化**：通过 `BindKey()` 和 `InitData()` 方法加载角色数据，包括属性、技能、装备等。
- **属性管理**：通过 `AddAttr()` 方法增加角色属性，并通过 `LimitAllAttrs()` 方法限制属性范围。
- **技能管理**：通过 `GetSkillsList()` 方法获取角色技能列表，并通过 `LearnMagic()` 方法学习新技能。
- **装备管理**：通过 `GetWeapon()`、`GetArmor()`、`GetXiulianItem()` 方法获取角色装备，并通过 `UseItem()`、`UnequipItem()` 方法使用和卸载装备。
- **战斗相关**：通过 `EnterBattle()`、`LeaveBattle()` 方法管理角色战斗状态，并通过 `IncSp()`、`GetMoveAbility()` 方法管理行动力。
- **状态管理**：通过 `IsDead()`、`Resurrect()`、`Stun()`、`StopStun()` 方法管理角色状态，如死亡、复活、晕眩等。
<file_info>
<function_info>
函数名: AddAttr
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 400
</function_info>
<function_info>
函数名: AddItem
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 512
</function_info>
<function_info>
函数名: Anqi
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 45
</function_info>
<function_info>
函数名: AntiPoison
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 40
</function_info>
<function_info>
函数名: Armor
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 70
</function_info>
<function_info>
函数名: Attack
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 34
</function_info>
<function_info>
函数名: AttackPoison
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 48
</function_info>
<function_info>
函数名: BattleModel
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 921
</function_info>
<function_info>
函数名: BindKey
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 89
</function_info>
<function_info>
函数名: CanFinishedItem
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 832
</function_info>
<function_info>
函数名: CanLevelUp
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 238
</function_info>
<function_info>
函数名: CanUseItem
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 547
</function_info>
<function_info>
函数名: CanUseItem
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 535
</function_info>
<function_info>
函数名: Clone
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1202
</function_info>
<function_info>
函数名: CompareTo
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1038
</function_info>
<function_info>
函数名: CurrentSkill
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 74
</function_info>
<function_info>
函数名: Data
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 902
</function_info>
<function_info>
函数名: DePoison
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 39
</function_info>
<function_info>
函数名: Defence
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 36
</function_info>
<function_info>
函数名: EnterBattle
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 963
</function_info>
<function_info>
函数名: Exp
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 32
</function_info>
<function_info>
函数名: ExpForItem
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 55
</function_info>
<function_info>
函数名: ExpForMakeItem
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 67
</function_info>
<function_info>
函数名: ExpGot
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 414
</function_info>
<function_info>
函数名: GetArmor
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 424
</function_info>
<function_info>
函数名: GetArmorProperty
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1168
</function_info>
<function_info>
函数名: GetExtraAttack
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1188
</function_info>
<function_info>
函数名: GetFinishedExpForItem
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 842
</function_info>
<function_info>
函数名: GetFinishedExpForItem
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 852
</function_info>
<function_info>
函数名: GetHPColor1
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1153
</function_info>
<function_info>
函数名: GetHPColor2
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1158
</function_info>
<function_info>
函数名: GetJyx2RoleId
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 209
</function_info>
<function_info>
函数名: GetLevelUpExp
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 258
</function_info>
<function_info>
函数名: GetMPColor
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1148
</function_info>
<function_info>
函数名: GetMoveAbility
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1017
</function_info>
<function_info>
函数名: GetPic
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 213
</function_info>
<function_info>
函数名: GetSkillsList
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 448
</function_info>
<function_info>
函数名: GetWeapon
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 418
</function_info>
<function_info>
函数名: GetWeaponProperty
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1163
</function_info>
<function_info>
函数名: GetWugongLevel
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 890
</function_info>
<function_info>
函数名: GetXiulianItem
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 431
</function_info>
<function_info>
函数名: HaveItemBool
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 502
</function_info>
<function_info>
函数名: Heal
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 37
</function_info>
<function_info>
函数名: Hp
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 62
</function_info>
<function_info>
函数名: HpInc
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 52
</function_info>
<function_info>
函数名: Hurt
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 64
</function_info>
<function_info>
函数名: IQ
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 51
</function_info>
<function_info>
函数名: IncSp
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1010
</function_info>
<function_info>
函数名: InitData
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 113
</function_info>
<function_info>
函数名: InitData
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 152
</function_info>
<function_info>
函数名: IsAI
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1033
</function_info>
<function_info>
函数名: IsDead
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1048
</function_info>
<function_info>
函数名: IsPlayerRole
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1209
</function_info>
<function_info>
函数名: IsStun
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1091
</function_info>
<function_info>
函数名: Items
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 57
</function_info>
<function_info>
函数名: Jyx2
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 21
<function_comments>
        /// <summary>
        /// 升级属性计算公式可以参考：https://github.com/ZhanruiLiang/jinyong-legend
        ///
        /// 
        /// </summary>
        /// <returns></returns>
        /// <summary>
        /// 限制属性范围
        /// 
        /// Attack、Defence、Qinggong为最终状态：原始属性 + 此刻使用的装备属性的总值
        /// 
        /// </summary>
        /// <summary>
        /// 角色专用的属性范围限制
        /// </summary>
        /// <summary>
        /// 增加角色属性的API
        /// </summary>
        /// <param name="attrName">属性名</param>
        /// <param name="delta">属性增量</param>
        /// <returns>属性实际增量</returns>
        /// <summary>
        /// 战斗中使用的招式
        /// </summary>
        /// <summary>
        /// 获取该角色所有的招式，（如果有医疗、用毒、解毒，也封装成招式）
        /// </summary>
        /// <returns></returns>
        /// <summary>
        /// 为角色添加物品
        /// </summary>
        /// <param name="itemId"></param>
        /// <param name="count"></param>
        /// <summary>
        /// 判断角色是否可以使用道具
        /// 
        /// 对应kyscpp：bool GameUtil::canUseItem(Role* r, Item* i)
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        /// <summary>
        /// 炼制物品
        /// 计算公式可以参考：https://github.com/ZhanruiLiang/jinyong-legend
        /// </summary>
        /// <param name="item"></param>
        /// <summary>
        /// 使用物品
        /// </summary>
        /// <param name="item"></param>
        /// <summary>
        /// 卸下物品（装备）
        /// </summary>
        /// <param name="item"></param>
        /// <summary>
        /// 获得修炼所需经验
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        /// <summary>
        /// 晕眩
        /// </summary>
        /// <param name="duration">等于0时不晕眩；大于0时晕眩{duration}秒；小于0时永久晕眩</param>
        /// <summary>
        /// 获取武器武功配合加攻击力
        ///
        /// 计算方法参考：https://github.com/ZhanruiLiang/jinyong-legend
        ///
        /// 玄铁剑+玄铁剑法 攻击+100
        /// 君子剑+玉女素心剑 攻击+50
        /// 淑女剑+玉女素心剑 攻击+50
        /// 血刀+血刀大法 攻击+50
        /// 冷月宝刀+胡家刀法 攻击+70
        /// 金蛇剑+金蛇剑法 攻击力+80
        /// 霹雳狂刀+霹雳刀法 攻击+100
        /// </summary>
        /// <param name="wugong"></param>
        /// <returns></returns>
</function_comments>
</function_info>
<function_info>
函数名: Key
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 27
</function_info>
<function_info>
函数名: LearnMagic
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1112
</function_info>
<function_info>
函数名: LeaveBattle
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 998
</function_info>
<function_info>
函数名: Level
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 31
</function_info>
<function_info>
函数名: LevelUp
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 272
</function_info>
<function_info>
函数名: LianZhiItem
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 671
</function_info>
<function_info>
函数名: LimitAllAttrs
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 315
</function_info>
<function_info>
函数名: LimitAttr
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 361
</function_info>
<function_info>
函数名: MaxHp
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 63
</function_info>
<function_info>
函数名: MaxMp
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 60
</function_info>
<function_info>
函数名: Model
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 218
</function_info>
<function_info>
函数名: Mp
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 59
</function_info>
<function_info>
函数名: MpType
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 61
</function_info>
<function_info>
函数名: Name
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 28
</function_info>
<function_info>
函数名: OnRest
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1099
</function_info>
<function_info>
函数名: Pinde
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 47
</function_info>
<function_info>
函数名: Poison
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 65
</function_info>
<function_info>
函数名: Pos
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 938
</function_info>
<function_info>
函数名: PreviousRoundHp
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 415
</function_info>
<function_info>
函数名: Qimen
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 44
</function_info>
<function_info>
函数名: Qinggong
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 35
</function_info>
<function_info>
函数名: Quanzhang
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 41
</function_info>
<function_info>
函数名: Random
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 18
<function_comments>
        /// <summary>
        /// 升级属性计算公式可以参考：https://github.com/ZhanruiLiang/jinyong-legend
        ///
        /// 
        /// </summary>
        /// <returns></returns>
        /// <summary>
        /// 限制属性范围
        /// 
        /// Attack、Defence、Qinggong为最终状态：原始属性 + 此刻使用的装备属性的总值
        /// 
        /// </summary>
        /// <summary>
        /// 角色专用的属性范围限制
        /// </summary>
        /// <summary>
        /// 增加角色属性的API
        /// </summary>
        /// <param name="attrName">属性名</param>
        /// <param name="delta">属性增量</param>
        /// <returns>属性实际增量</returns>
        /// <summary>
        /// 战斗中使用的招式
        /// </summary>
        /// <summary>
        /// 获取该角色所有的招式，（如果有医疗、用毒、解毒，也封装成招式）
        /// </summary>
        /// <returns></returns>
        /// <summary>
        /// 为角色添加物品
        /// </summary>
        /// <param name="itemId"></param>
        /// <param name="count"></param>
        /// <summary>
        /// 判断角色是否可以使用道具
        /// 
        /// 对应kyscpp：bool GameUtil::canUseItem(Role* r, Item* i)
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        /// <summary>
        /// 炼制物品
        /// 计算公式可以参考：https://github.com/ZhanruiLiang/jinyong-legend
        /// </summary>
        /// <param name="item"></param>
        /// <summary>
        /// 使用物品
        /// </summary>
        /// <param name="item"></param>
        /// <summary>
        /// 卸下物品（装备）
        /// </summary>
        /// <param name="item"></param>
        /// <summary>
        /// 获得修炼所需经验
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        /// <summary>
        /// 晕眩
        /// </summary>
        /// <param name="duration">等于0时不晕眩；大于0时晕眩{duration}秒；小于0时永久晕眩</param>
        /// <summary>
        /// 获取武器武功配合加攻击力
        ///
        /// 计算方法参考：https://github.com/ZhanruiLiang/jinyong-legend
        ///
        /// 玄铁剑+玄铁剑法 攻击+100
        /// 君子剑+玉女素心剑 攻击+50
        /// 淑女剑+玉女素心剑 攻击+50
        /// 血刀+血刀大法 攻击+50
        /// 冷月宝刀+胡家刀法 攻击+70
        /// 金蛇剑+金蛇剑法 攻击力+80
        /// 霹雳狂刀+霹雳刀法 攻击+100
        /// </summary>
        /// <param name="wugong"></param>
        /// <returns></returns>
</function_comments>
</function_info>
<function_info>
函数名: Recover
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 198
</function_info>
<function_info>
函数名: ResetForBattle
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 191
</function_info>
<function_info>
函数名: ResetItems
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 492
</function_info>
<function_info>
函数名: ResetSkillCasts
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 472
</function_info>
<function_info>
函数名: Resurrect
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1053
</function_info>
<function_info>
函数名: RoleInstance
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 77
</function_info>
<function_info>
函数名: RoleInstance
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 81
</function_info>
<function_info>
函数名: RoleInstance
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 24
<function_comments>
        /// <summary>
        /// 升级属性计算公式可以参考：https://github.com/ZhanruiLiang/jinyong-legend
        ///
        /// 
        /// </summary>
        /// <returns></returns>
        /// <summary>
        /// 限制属性范围
        /// 
        /// Attack、Defence、Qinggong为最终状态：原始属性 + 此刻使用的装备属性的总值
        /// 
        /// </summary>
        /// <summary>
        /// 角色专用的属性范围限制
        /// </summary>
        /// <summary>
        /// 增加角色属性的API
        /// </summary>
        /// <param name="attrName">属性名</param>
        /// <param name="delta">属性增量</param>
        /// <returns>属性实际增量</returns>
        /// <summary>
        /// 战斗中使用的招式
        /// </summary>
        /// <summary>
        /// 获取该角色所有的招式，（如果有医疗、用毒、解毒，也封装成招式）
        /// </summary>
        /// <returns></returns>
        /// <summary>
        /// 为角色添加物品
        /// </summary>
        /// <param name="itemId"></param>
        /// <param name="count"></param>
        /// <summary>
        /// 判断角色是否可以使用道具
        /// 
        /// 对应kyscpp：bool GameUtil::canUseItem(Role* r, Item* i)
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        /// <summary>
        /// 炼制物品
        /// 计算公式可以参考：https://github.com/ZhanruiLiang/jinyong-legend
        /// </summary>
        /// <param name="item"></param>
        /// <summary>
        /// 使用物品
        /// </summary>
        /// <param name="item"></param>
        /// <summary>
        /// 卸下物品（装备）
        /// </summary>
        /// <param name="item"></param>
        /// <summary>
        /// 获得修炼所需经验
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        /// <summary>
        /// 晕眩
        /// </summary>
        /// <param name="duration">等于0时不晕眩；大于0时晕眩{duration}秒；小于0时永久晕眩</param>
        /// <summary>
        /// 获取武器武功配合加攻击力
        ///
        /// 计算方法参考：https://github.com/ZhanruiLiang/jinyong-legend
        ///
        /// 玄铁剑+玄铁剑法 攻击+100
        /// 君子剑+玉女素心剑 攻击+50
        /// 淑女剑+玉女素心剑 攻击+50
        /// 血刀+血刀大法 攻击+50
        /// 冷月宝刀+胡家刀法 攻击+70
        /// 金蛇剑+金蛇剑法 攻击力+80
        /// 霹雳狂刀+霹雳刀法 攻击+100
        /// </summary>
        /// <param name="wugong"></param>
        /// <returns></returns>
</function_comments>
</function_info>
<function_info>
函数名: SetHPAndRefreshHudBar
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 980
</function_info>
<function_info>
函数名: Sex
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 30
</function_info>
<function_info>
函数名: Shengwang
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 50
</function_info>
<function_info>
函数名: Shuadao
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 43
</function_info>
<function_info>
函数名: Skills
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 441
<function_comments>
        /// <summary>
        /// 获取该角色所有的招式，（如果有医疗、用毒、解毒，也封装成招式）
        /// </summary>
        /// <returns></returns>
</function_comments>
</function_info>
<function_info>
函数名: StopStun
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1084
</function_info>
<function_info>
函数名: Stun
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1065
</function_info>
<function_info>
函数名: SwitchAnimationToSkill
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 988
</function_info>
<function_info>
函数名: Tili
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 66
</function_info>
<function_info>
函数名: TimeRun
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1004
</function_info>
<function_info>
函数名: UnequipItem
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 786
</function_info>
<function_info>
函数名: UpdateViewPostion
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 950
</function_info>
<function_info>
函数名: UseItem
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 722
</function_info>
<function_info>
函数名: UsePoison
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 38
</function_info>
<function_info>
函数名: View
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 917
</function_info>
<function_info>
函数名: Weapon
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 69
</function_info>
<function_info>
函数名: Wugongs
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 56
</function_info>
<function_info>
函数名: Wuxuechangshi
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 46
</function_info>
<function_info>
函数名: Xiulianwupin
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 71
</function_info>
<function_info>
函数名: Yujian
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 42
</function_info>
<function_info>
函数名: Zuoyouhubo
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 49
</function_info>
<function_info>
函数名: _currentSkill
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 986
</function_info>
<function_info>
函数名: _data
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 915
</function_info>
<function_info>
函数名: _isInBattle
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 924
</function_info>
<function_info>
函数名: _isStun
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 1059
<function_comments>
        /// <summary>
        /// 晕眩
        /// </summary>
        /// <param name="duration">等于0时不晕眩；大于0时晕眩{duration}秒；小于0时永久晕眩</param>
</function_comments>
</function_info>
<function_info>
函数名: _pos
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 935
</function_info>
<function_info>
函数名: _thisType
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 393
<function_comments>
        /// <summary>
        /// 增加角色属性的API
        /// </summary>
        /// <param name="attrName">属性名</param>
        /// <param name="delta">属性增量</param>
        /// <returns>属性实际增量</returns>
</function_comments>
</function_info>
<function_info>
函数名: checkUp
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 383
</function_info>
<function_info>
函数名: getLevelUpExp
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 251
</function_info>
<function_info>
函数名: isAI
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 933
</function_info>
<function_info>
函数名: isActed
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 960
</function_info>
<function_info>
函数名: isWaiting
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 961
</function_info>
<function_info>
函数名: movedStep
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 957
</function_info>
<function_info>
函数名: runtime
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 661
</function_info>
<function_info>
函数名: sp
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 930
</function_info>
<function_info>
函数名: team
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 927
</function_info>
<function_info>
函数名: testAttr
文件路径: D:/Unity/jyx2/Assets/Scripts/GameSave/RoleInstance.cs, 行号: 645
</function_info>
</file_info>

2024-12-15 16:14:48,600 - INFO Retriever 0 - 

————————————————————————————————————————————————————————————————
2024-12-15 16:14:48,600 - INFO Retriever 0 - 当前窗口总长度：13
2024-12-15 16:14:48,602 - INFO Retriever 0 - 当前更新窗口长度：4
2024-12-15 16:14:48,602 - INFO Retriever 0 - 当前更新窗口长度：4
2024-12-15 16:14:48,602 - INFO Retriever 0 - ————————————————————————————————————————————————————————————————


2024-12-15 16:14:55,443 - INFO Retriever 0 - Agent主脑给出的回答为：根据对`RoleInstance.cs`文件内容的阅读，我注意到该脚本中有一个名为`SwitchAnimationToSkill`的函数，该函数可能与指定角色战斗动画的逻辑相关。我需要进一步阅读该函数的详细内容，以确定它是否是修改角色战斗动画的关键所在。因此，我将采取以下行动：

```json
{
    "read_long_details": {
        "file_path": "D:\\Unity\\jyx2\\Assets\\Scripts\\GameSave\\RoleInstance.cs"
    }
}
```
2024-12-15 16:14:55,443 - INFO Retriever 0 - 是否成功解析：True
2024-12-15 16:14:55,444 - INFO Retriever 0 - operation_type (__det_dir_action):
2024-12-15 16:14:55,444 - INFO Retriever 0 - read_long_details
2024-12-15 16:14:55,444 - INFO Retriever 0 - 

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
2024-12-15 16:14:55,444 - INFO Retriever 0 - Assistant:
2024-12-15 16:14:55,444 - INFO Retriever 0 - {
    "read_long_details": {
        "file_path": "D:\\Unity\\jyx2\\Assets\\Scripts\\GameSave\\RoleInstance.cs"
    }
}
2024-12-15 16:14:55,445 - INFO Retriever 0 - dict_keys(['read_long_details'])
2024-12-15 16:14:55,445 - INFO Retriever 0 - Agent主脑给出的行动：read_long_details
参数：{'file_path': 'D:\\Unity\\jyx2\\Assets\\Scripts\\GameSave\\RoleInstance.cs', 'top_path': 'D:/Unity/jyx2\\Assets', 'return_file_sum': <bound method TreeGenerationAction.return_file_sum of <Action.tree_gen_action.TreeGenerationAction object at 0x000001A807224BD0>>}
2024-12-15 16:14:55,446 - INFO Retriever 0 - Observer: 这是一个名为“RoleInstance.cs”的文件，该文件里的内容为：
   1|/*
   2| * 金庸群侠传3D重制版
   3| * https://github.com/jynew/jynew
   4| *
   5| * 这是本开源项目文件头，所有代码均使用MIT协议。
   6| * 但游戏内资源和第三方插件、dll等请仔细阅读LICENSE相关授权协议文档。
   7| *
   8| * 金庸老先生千古！
   9| */
  10|
  11|using System;
  12|using System.Collections.Generic;
  13|using IFix;
  14|using Jyx2.Middleware;
  15|using UnityEngine;
  16|using UniRx;
  17|using NUnit.Framework;
  18|using Random = UnityEngine.Random;
  19|using XLua;
  20|
  21|namespace Jyx2
  22|{
  23|    [Serializable]
  24|    public class RoleInstance : IComparable<RoleInstance>
  25|    {
  26|    #region 存档数据定义
  27|        [SerializeField] public int Key; //ID
  28|        [SerializeField] public string Name; //姓名
  29|
  30|        [SerializeField] public int Sex; //性别
  31|        [SerializeField] public int Level = 1; //等级
  32|        [SerializeField] public int Exp; //经验
  33|
  34|        [SerializeField] public int Attack; //攻击力
  35|        [SerializeField] public int Qinggong; //轻功
  36|        [SerializeField] public int Defence; //防御力
  37|        [SerializeField] public int Heal; //医疗
  38|        [SerializeField] public int UsePoison; //用毒
  39|        [SerializeField] public int DePoison; //解毒
  40|        [SerializeField] public int AntiPoison; //抗毒
  41|        [SerializeField] public int Quanzhang; //拳掌
  42|        [SerializeField] public int Yujian; //御剑
  43|        [SerializeField] public int Shuadao; //耍刀
  44|        [SerializeField] public int Qimen; //特殊兵器
  45|        [SerializeField] public int Anqi; //暗器技巧
  46|        [SerializeField] public int Wuxuechangshi; //武学常识
  47|        [SerializeField] public int Pinde; //品德
  48|        [SerializeField] public int AttackPoison; //攻击带毒
  49|        [SerializeField] public int Zuoyouhubo; //左右互搏
  50|        [SerializeField] public int Shengwang; //声望
  51|        [SerializeField] public int IQ; //资质
  52|        [SerializeField] public int HpInc; //生命增长
  53|
  54|
  55|        [SerializeField] public int ExpForItem; //修炼点数
  56|        [SerializeField] public List<SkillInstance> Wugongs = new List<SkillInstance>(); //武功
  57|        [SerializeField] public List<CsRoleItem> Items = new List<CsRoleItem>(); //道具
  58|
  59|        [SerializeField] public int Mp;
  60|        [SerializeField] public int MaxMp;
  61|        [SerializeField] public int MpType; //内力性质
  62|        [SerializeField] public int Hp;
  63|        [SerializeField] public int MaxHp;
  64|        [SerializeField] public int Hurt; //受伤程度
  65|        [SerializeField] public int Poison; //中毒程度
  66|        [SerializeField] public int Tili; //体力
  67|        [SerializeField] public int ExpForMakeItem; //物品修炼点
  68|
  69|        [SerializeField] public int Weapon; //武器
  70|        [SerializeField] public int Armor; //防具
  71|        [SerializeField] public int Xiulianwupin = -1; //修炼物品
  72|
  73|
  74|        [SerializeField] public int CurrentSkill = 0; //当前技能
  75|        #endregion
  76|
  77|        public RoleInstance()
  78|        {
  79|        }
  80|
  81|        public RoleInstance(int roleId)
  82|        {
  83|            Key = roleId;
  84|            BindKey();
  85|            InitData();
  86|            Recover();
  87|        }
  88|
  89|        public void BindKey()
  90|        {
  91|            _data = LuaToCsBridge.CharacterTable[Key];
  92|
  93|            if (_data == null)
  94|            {
  95|                Assert.Fail("无法获取角色配置，配置不存在，Id:" + Key);
  96|            }
  97|
  98|            //初始化武功列表，只有武功数量为0时才需要初始化
  99|            if (Wugongs.Count == 0)
 100|            {
 101|                foreach (var _skill in _data.Skills)
 102|                {
 103|                    Wugongs.Add(new SkillInstance(_skill));
 104|                }
 105|            }
 106|
 107|            //每次战斗前reset一次
 108|            ResetForBattle();
 109|        }
 110|
 111|
 112|#if !INJECTFIX_PATCH_ENABLE
 113|        void InitData()
 114|        {
 115|            //CG 初始化
 116|            Name = Data.Name;
 117|            Sex = (int)Data.Sexual;
 118|            Level = Data.Level;
 119|            Exp = Data.Exp;
 120|            Hp = Data.MaxHp;
 121|            PreviousRoundHp = Hp;
 122|            MaxHp = Data.MaxHp;
 123|            Mp = Data.MaxMp;
 124|            MaxMp = Data.MaxMp;
 125|            Tili = GameConst.MAX_ROLE_TILI;
 126|            Weapon = Data.Weapon;
 127|            Armor = Data.Armor;
 128|            MpType = Data.MpType;
 129|            Attack = Data.Attack;
 130|            Qinggong = Data.Qinggong;
 131|            Defence = Data.Defence;
 132|            Heal = Data.Heal;
 133|            UsePoison = Data.UsePoison;
 134|            DePoison = Data.DePoison;
 135|            AntiPoison = Data.AntiPoison;
 136|            Quanzhang = Data.Quanzhang;
 137|            Yujian = Data.Yujian;
 138|            Shuadao = Data.Shuadao;
 139|            Qimen = Data.Qimen;
 140|            Anqi = Data.Anqi;
 141|            Wuxuechangshi = Data.Wuxuechangshi;
 142|            Pinde = Data.Pinde;
 143|            AttackPoison = Data.AttackPoison;
 144|            Zuoyouhubo = Data.Zuoyouhubo;
 145|            IQ = Data.IQ;
 146|            HpInc = Data.HpInc;
 147|
 148|            ResetItems();
 149|        }
 150|#else
 151|        [IFix.Patch]
 152|        void InitData()
 153|        {
 154|            //CG 初始化
 155|            Name = Data.Name;
 156|            Sex = (int)Data.Sexual;
 157|            Level = Data.Level;
 158|            Exp = Data.Exp;
 159|            Hp = Data.MaxHp;
 160|            PreviousRoundHp = Hp;
 161|            MaxHp = Data.MaxHp;
 162|            Mp = Data.MaxMp;
 163|            MaxMp = Data.MaxMp + 1000;
 164|            Tili = GameConst.MAX_ROLE_TILI;
 165|            Weapon = Data.Weapon;
 166|            Armor = Data.Armor;
 167|            MpType = Data.MpType;
 168|            Attack = Data.Attack;
 169|            Qinggong = Data.Qinggong;
 170|            Defence = Data.Defence;
 171|            Heal = Data.Heal;
 172|            UsePoison = Data.UsePoison;
 173|            DePoison = Data.DePoison;
 174|            AntiPoison = Data.AntiPoison;
 175|            Quanzhang = Data.Quanzhang;
 176|            Yujian = Data.Yujian;
 177|            Shuadao = Data.Shuadao;
 178|            Qimen = Data.Qimen;
 179|            Anqi = Data.Anqi;
 180|            Wuxuechangshi = Data.Wuxuechangshi;
 181|            Pinde = Data.Pinde;
 182|            AttackPoison = Data.AttackPoison;
 183|            Zuoyouhubo = Data.Zuoyouhubo;
 184|            IQ = Data.IQ;
 185|            HpInc = Data.HpInc;
 186|
 187|            ResetItems();
 188|        }
 189|#endif
 190|
 191|        public void ResetForBattle()
 192|        {
 193|            ResetSkillCasts();
 194|            //停止在BindKey时刷新物品
 195|            //ResetItems();
 196|        }
 197|
 198|        public void Recover()
 199|        {
 200|            SetHPAndRefreshHudBar(MaxHp);
 201|
 202|            Mp = MaxMp;
 203|            Tili = GameConst.MAX_ROLE_TILI;
 204|
 205|            Hurt = 0;
 206|            Poison = 0;
 207|        }
 208|
 209|        public int GetJyx2RoleId()
 210|        {
 211|            return Key;
 212|        }
 213|        public string GetPic()
 214|        {
 215|            return $"BuildSource/head/{Data.Pic}.png";
 216|        }
 217|        //模型配置
 218|        public ModelAsset Model
 219|        {
 220|            get
 221|            {
 222|                //如果配置了，则从配置表读取，否则根据名字读取
 223|                if (!string.IsNullOrWhiteSpace(Data.ModelFileKey))
 224|                {
 225|                    return ModelAsset.Get(Data.ModelFileKey);
 226|                }
 227|                else
 228|                {
 229|                    return ModelAsset.Get(Data.Name);    
 230|                }
 231|            }
 232|        }
 233|        #region JYX2等级相关
 234|
 235|
 236|
 237|        //JYX2
 238|        public bool CanLevelUp()
 239|        {
 240|            if (this.Level >= 1 && this.Level < GameConst.MAX_ROLE_LEVEL)
 241|            {
 242|                if (this.Exp >= getLevelUpExp(this.Level))
 243|                {
 244|                    return true;
 245|                }
 246|            }
 247|
 248|            return false;
 249|        }
 250|
 251|        int getLevelUpExp(int level)
 252|        {
 253|            //防止越界，限制下
 254|            level = Mathf.Clamp(level, 0, GameConst._levelUpExpList.Count);
 255|            return GameConst._levelUpExpList[level - 1];
 256|        }
 257|
 258|        public int GetLevelUpExp()
 259|        {
 260|            //防止越界，限制下
 261|            int lv = Mathf.Clamp(Level, 0, GameConst._levelUpExpList.Count);
 262|            return GameConst._levelUpExpList[lv - 1];
 263|        }
 264|
 265|
 266|        /// <summary>
 267|        /// 升级属性计算公式可以参考：https://github.com/ZhanruiLiang/jinyong-legend
 268|        ///
 269|        /// 
 270|        /// </summary>
 271|        /// <returns></returns>
 272|        public void LevelUp()
 273|        {
 274|            Level++;
 275|            Tili = GameConst.MAX_ROLE_TILI;
 276|            MaxHp += (HpInc + Random.Range(0, 3)) * 3;
 277|            SetHPAndRefreshHudBar(this.MaxHp);
 278|            //当0 <= 资质 < 30, a = 2;
 279|            //当30 <= 资质 < 50, a = 3;
 280|            //当50 <= 资质 < 70, a = 4;
 281|            //当70 <= 资质 < 90, a = 5;
 282|            //当90 <= 资质 <= 100, a = 6;
 283|            //a = random(a) + 1;
 284|            int a = Random.Range(0, (int)Math.Floor((double)(IQ - 10) / 20) + 2) + 1;
 285|            MaxMp += (9 - a) * 4;
 286|            Mp = MaxMp;
 287|
 288|            Hurt = 0;
 289|            Poison = 0;
 290|
 291|            Attack += a;
 292|            Qinggong += a;
 293|            Defence += a;
 294|
 295|            Heal = checkUp(Heal, 20, 3);
 296|            DePoison = checkUp(DePoison, 20, 3);
 297|            UsePoison = checkUp(UsePoison, 20, 3);
 298|
 299|            Quanzhang = checkUp(Quanzhang, 20, 3);
 300|            Yujian = checkUp(Yujian, 20, 3);
 301|            Shuadao = checkUp(Shuadao, 20, 3);
 302|            Anqi = checkUp(Anqi, 20, 3);
 303|
 304|            this.LimitAllAttrs();
 305|
 306|            Debug.Log($"{this.Name}升到{this.Level}级！");
 307|        }
 308|
 309|        /// <summary>
 310|        /// 限制属性范围
 311|        /// 
 312|        /// Attack、Defence、Qinggong为最终状态：原始属性 + 此刻使用的装备属性的总值
 313|        /// 
 314|        /// </summary>
 315|        void LimitAllAttrs()
 316|        {
 317|            Exp = Tools.Limit(Exp, 0, GameConst.MAX_EXP);
 318|            ExpForItem = Tools.Limit(ExpForItem, 0, GameConst.MAX_EXP);
 319|            ExpForMakeItem = Tools.Limit(ExpForMakeItem, 0, GameConst.MAX_EXP);
 320|            Poison = Tools.Limit(Poison, 0, GameConst.MAX_POISON);
 321|            MaxHp = Tools.Limit(MaxHp, 0, GameConst.MAX_ROLE_HP);
 322|            MaxMp = Tools.Limit(MaxMp, 0, GameConst.MAX_ROLE_MP);
 323|            Hp = Tools.Limit(Hp, 0, MaxHp);
 324|            Mp = Tools.Limit(Mp, 0, MaxMp);
 325|            Tili = Tools.Limit(Tili, 0, GameConst.MAX_ROLE_TILI);
 326|
 327|            // 获取装备增加的属性，这些属性不受最大值限制
 328|            var equipAttack = GetWeaponProperty("Attack") + GetArmorProperty("Attack");
 329|            var equipDefence = GetWeaponProperty("Defence") + GetArmorProperty("Defence");
 330|            var equipQinggong = GetWeaponProperty("Qinggong") + GetArmorProperty("Qinggong");
 331|            // 限制属性
 332|            Attack = LimitAttr(Attack, 0, GameConst.MAX_ROLE_ATTACK, equipAttack);
 333|            Defence = LimitAttr(Defence, 0, GameConst.MAX_ROLE_DEFENCE, equipDefence);
 334|            Qinggong = LimitAttr(Qinggong, 0, GameConst.MAX_ROLE_QINGGONG, equipQinggong);
 335|
 336|            UsePoison = Tools.Limit(UsePoison, 0, GameConst.MAX_USE_POISON);
 337|            DePoison = Tools.Limit(DePoison, 0, GameConst.MAX_DEPOISON);
 338|            Heal = Tools.Limit(Heal, 0, GameConst.MAX_HEAL);
 339|            AntiPoison = Tools.Limit(AntiPoison, 0, GameConst.MAX_ANTIPOISON);
 340|
 341|            Quanzhang = Tools.Limit(Quanzhang, 0, GameConst.MAX_ROLE_WEAPON_ATTR);
 342|            Yujian = Tools.Limit(Yujian, 0, GameConst.MAX_ROLE_WEAPON_ATTR);
 343|            Shuadao = Tools.Limit(Shuadao, 0, GameConst.MAX_ROLE_WEAPON_ATTR);
 344|            Qimen = Tools.Limit(Qimen, 0, GameConst.MAX_ROLE_WEAPON_ATTR);
 345|            Anqi =Tools.Limit(Anqi, 0, GameConst.MAX_ROLE_WEAPON_ATTR);
 346|
 347|            IQ = Tools.Limit(IQ, 0, GameConst.MAX_ROLE_ZIZHI);
 348|            Pinde = Tools.Limit(Pinde, 0, GameConst.MAX_ROLE_PINDE);
 349|            Shengwang = Tools.Limit(Shengwang, 0, GameConst.MAX_ROLE_SHENGWANG);
 350|            AttackPoison = Tools.Limit(AttackPoison, 0, GameConst.MAX_ROLE_ATK_POISON);
 351|            Hurt = Tools.Limit(Hurt, 0, GameConst.MAX_HURT);
 352|
 353|            foreach (var wugong in Wugongs)
 354|            {
 355|                wugong.Level = Tools.Limit(wugong.Level, 0, GameConst.MAX_SKILL_LEVEL);
 356|            }
 357|        }
 358|        /// <summary>
 359|        /// 角色专用的属性范围限制
 360|        /// </summary>
 361|        int LimitAttr(int attr, int minValue, int maxValue, int extraValue)
 362|        {
 363|            int attrNeat = attr - extraValue;
 364|            //净值大于最大值，限制净值为最大值
 365|            if (attrNeat > maxValue)
 366|            {
 367|                return maxValue + extraValue;
 368|            }
 369|            //净值小于最小值而且附加值为正,限制净值为最小值
 370|            if (attrNeat < minValue && extraValue > 0)
 371|            {
 372|                return minValue + extraValue;
 373|            }
 374|            //净值小于最小值且附加值为负,限制总值为最小值
 375|            if (attrNeat < minValue && extraValue < 0)
 376|            {
 377|                return minValue;
 378|            }
 379|            //以上都没有，则认为属性符合要求
 380|            return attr;
 381|        }
 382|
 383|        int checkUp(int value, int limit, int max_inc)
 384|        {
 385|            if (value >= limit)
 386|            {
 387|                value += Random.Range(0, max_inc);
 388|            }
 389|
 390|            return value;
 391|        }
 392|
 393|        private static Type _thisType = Type.GetType("Jyx2.RoleInstance");
 394|        /// <summary>
 395|        /// 增加角色属性的API
 396|        /// </summary>
 397|        /// <param name="attrName">属性名</param>
 398|        /// <param name="delta">属性增量</param>
 399|        /// <returns>属性实际增量</returns>
 400|        public int AddAttr(string attrName, int delta)
 401|        {
 402|            var attr = _thisType.GetField(attrName);
 403|            if (attr == null)
 404|            {
 405|                Debug.LogError($"人物属性 {attrName} 不存在");
 406|                return 0;
 407|            }
 408|            int oldValue = (int)attr.GetValue(this);
 409|            attr.SetValue(this, oldValue + delta);
 410|            LimitAllAttrs();
 411|            return (int)attr.GetValue(this) - oldValue;
 412|        }
 413|
 414|        public int ExpGot; //战斗中获得的经验
 415|        public int PreviousRoundHp; //上一回合的生命值
 416|        #endregion
 417|
 418|        public LItemConfig GetWeapon()
 419|        {
 420|            if (Weapon == -1) return null;
 421|            return LuaToCsBridge.ItemTable[Weapon];
 422|        }
 423|
 424|        public LItemConfig GetArmor()
 425|        {
 426|            if (Armor == -1) return null;
 427|            return LuaToCsBridge.ItemTable[Armor];
 428|        }
 429|
 430|
 431|        public LItemConfig GetXiulianItem()
 432|        {
 433|            if (Xiulianwupin == -1) return null;
 434|            return LuaToCsBridge.ItemTable[Xiulianwupin];
 435|        }
 436|
 437|
 438|        /// <summary>
 439|        /// 战斗中使用的招式
 440|        /// </summary>
 441|        private List<SkillCastInstance> Skills;
 442|
 443|
 444|        /// <summary>
 445|        /// 获取该角色所有的招式，（如果有医疗、用毒、解毒，也封装成招式）
 446|        /// </summary>
 447|        /// <returns></returns>
 448|        public List<SkillCastInstance> GetSkillsList(bool forceAttackSkill)
 449|        {
 450|            List<SkillCastInstance> skills = new List<SkillCastInstance>();
 451|            //金庸DOS版逻辑，体力大于等于10且有武功最低等级所需内力值才可以使用技能
 452|            if (this.Tili >= 10)
 453|            {
 454|                foreach (var skill in Skills)
 455|                {
 456|                    if (this.Mp >= skill.Data.GetSkill().MpCost)
 457|                        skills.Add(skill);
 458|                }
 459|            }
 460|
 461|            if (forceAttackSkill)
 462|                return skills;
 463|
 464|            //金庸DOS版逻辑，用毒、解毒、医疗
 465|            if (this.UsePoison >= 20 && this.Tili >= 10) skills.Add( new PoisonSkillCastInstance(this.UsePoison));
 466|            if (this.DePoison >= 20 && this.Tili >= 10) skills.Add(new DePoisonSkillCastInstance(this.DePoison));
 467|            if (this.Heal >= 20 && this.Tili >= 50) skills.Add(new HealSkillCastInstance(this.Heal));
 468|
 469|            return skills;
 470|        }
 471|
 472|        public void ResetSkillCasts()
 473|        {
 474|            if (Skills == null)
 475|            {
 476|                Skills = new List<SkillCastInstance>();
 477|            }
 478|            else
 479|            {
 480|                Skills.Clear();
 481|            }
 482|
 483|            foreach (var wugong in Wugongs)
 484|            {
 485|                Skills.Add(new SkillCastInstance(wugong));
 486|            }
 487|        }
 488|
 489|        #region JYX2道具相关
 490|
 491|        //重置身上的物品
 492|        public void ResetItems()
 493|        {
 494|            Items.Clear();
 495|            //配置表中添加的物品
 496|            foreach (var item in Data.Items)
 497|            {
 498|                Items.Add(new CsRoleItem(item));
 499|            }
 500|        }
 501|
 502|        public bool HaveItemBool(int itemId)
 503|        {
 504|            return Items.FindIndex(it => it.Id == itemId) != -1;
 505|        }
 506|
 507|        /// <summary>
 508|        /// 为角色添加物品
 509|        /// </summary>
 510|        /// <param name="itemId"></param>
 511|        /// <param name="count"></param>
 512|        public void AddItem(int itemId, int count)
 513|        {
 514|            var item = Items.Find(it => it.Id == itemId);
 515|
 516|            if (item != null)
 517|            {
 518|                item.Count += count;
 519|
 520|                //fix issue of using one removed the entire item
 521|                if (count <  0 && item.Count <= 0)
 522|                    Items.Remove(item);
 523|            }
 524|            else
 525|            {
 526|                Items.Add(new CsRoleItem()
 527|                        {
 528|                        Id = itemId,
 529|                        Count = count
 530|                        });
 531|            }
 532|        }
 533|
 534|
 535|        public bool CanUseItem(int itemId)
 536|        {
 537|            return CanUseItem(LuaToCsBridge.ItemTable[itemId]);
 538|        }
 539|
 540|        /// <summary>
 541|        /// 判断角色是否可以使用道具
 542|        /// 
 543|        /// 对应kyscpp：bool GameUtil::canUseItem(Role* r, Item* i)
 544|        /// </summary>
 545|        /// <param name="item"></param>
 546|        /// <returns></returns>
 547|        public bool CanUseItem(LItemConfig item)
 548|        {
 549|            if (item == null) return false;
 550|
 551|            //剧情类无人可以使用
 552|            if (item.ItemType == 0)
 553|                return false;
 554|
 555|            else if ((int)item.ItemType == 1 || (int)item.ItemType == 2)
 556|            {
 557|
 558|                if ((int)item.ItemType == 2)
 559|                {   
 560|                    //若为可习得技能的武学
 561|                    if (item.Skill>=0)
 562|                    {
 563|                        //若武学等级大于一，说明已习得武学，直接装备
 564|                        int level = GetWugongLevel(item.Skill);
 565|                        if (level > 0)
 566|                        {
 567|                            return true;
 568|                        }
 569|                        //若无相关武学，开始装备条件判断
 570|                        //有仅适合人物，直接判断
 571|                        if (item.OnlySuitableRole >= 0)
 572|                        {
 573|                            return item.OnlySuitableRole == this.Key;
 574|                        }
 575|
 576|                        //内力属性判断
 577|                        if ((this.MpType == 0 || this.MpType == 1) && (item.NeedMPType == 0 || (int)item.NeedMPType == 1))
 578|                        {
 579|                            if (this.MpType != (int)item.NeedMPType)
 580|                            {
 581|                                return false;
 582|                            }
 583|                        }
 584|                        //若已经学满武学，则为假
 585|                        if (level < 0 || this.Wugongs.Count >= GameConst.MAX_SKILL_COUNT)
 586|                        {
 587|                            return false;
 588|                        }
 589|                    }
 590|                    //若不是练武学技能的秘籍
 591|                    else
 592|                    {
 593|
 594|                        //有仅适合人物，直接判断
 595|                        if (item.OnlySuitableRole >= 0)
 596|                        {
 597|                            return item.OnlySuitableRole == this.Key;
 598|                        }
 599|
 600|                        //内力属性判断
 601|                        if ((this.MpType == 0 || this.MpType == 1) && (item.NeedMPType == 0 || (int)item.NeedMPType == 1))
 602|                        {
 603|                            if (this.MpType != (int)item.NeedMPType)
 604|                            {
 605|                                return false;
 606|                            }
 607|                        }
 608|                    }
 609|
 610|
 611|
 612|                }
 613|
 614|
 615|
 616|                //上面的判断未确定则进入下面的判断链
 617|                return testAttr(this.Attack - GetWeaponProperty("Attack") - GetArmorProperty("Attack"), item.ConditionAttack)
 618|                    && testAttr(this.Qinggong - GetWeaponProperty("Qinggong") - GetArmorProperty("Qinggong"), item.ConditionQinggong)
 619|                    && testAttr(this.Heal, item.ConditionHeal)
 620|                    && testAttr(this.UsePoison, item.ConditionPoison)
 621|                    && testAttr(this.DePoison, item.ConditionDePoison)
 622|                    && testAttr(this.Quanzhang, item.ConditionQuanzhang)
 623|                    && testAttr(this.Yujian, item.ConditionYujian)
 624|                    && testAttr(this.Shuadao, item.ConditionShuadao)
 625|                    && testAttr(this.Qimen, item.ConditionQimen)
 626|                    && testAttr(this.Anqi, item.ConditionAnqi)
 627|                    && testAttr(this.MaxMp, item.ConditionMp)
 628|                    && testAttr(this.IQ, item.ConditionIQ);
 629|            }
 630|            else if ((int)item.ItemType == 3)
 631|            {
 632|                //药品类所有人可以使用
 633|                return true;
 634|            }
 635|            else if ((int)item.ItemType == 4)
 636|            {
 637|                //暗器类不可以使用
 638|                return false;
 639|            }
 640|
 641|            return false;
 642|        }
 643|
 644|
 645|        bool testAttr(int v, int v_need)
 646|        {
 647|            if (v_need > 0 && v < v_need)
 648|            {
 649|                return false;
 650|            }
 651|
 652|            if (v_need < 0 && v > -v_need)
 653|            {
 654|                return false;
 655|            }
 656|
 657|            return true;
 658|        }
 659|
 660|
 661|        private GameRuntimeData runtime
 662|        {
 663|            get { return GameRuntimeData.Instance; }
 664|        }
 665|
 666|        /// <summary>
 667|        /// 炼制物品
 668|        /// 计算公式可以参考：https://github.com/ZhanruiLiang/jinyong-legend
 669|        /// </summary>
 670|        /// <param name="item"></param>
 671|        public string LianZhiItem(LItemConfig practiseItem)
 672|        {
 673|            if (practiseItem == null)
 674|                return "";
 675|            if (practiseItem.GenerateItems == "")
 676|                return "";
 677|            if (practiseItem.GenerateItemNeedCost == -1)
 678|                return "";
 679|            if (!runtime.HaveItemBool(practiseItem.GenerateItemNeedCost))
 680|                return "";
 681|            var GenerateItemList = new List<CsRoleItem>();
 682|            var GenerateItemArr = practiseItem.GenerateItems.Split('|');
 683|            foreach (var GenerateItem in GenerateItemArr)
 684|            {
 685|                var GenerateItemArr2 = GenerateItem.Split(',');
 686|                if (GenerateItemArr2.Length != 2) continue;
 687|                var characterItem = new CsRoleItem();
 688|                characterItem.Id = int.Parse(GenerateItemArr2[0]);
 689|                characterItem.Count = int.Parse(GenerateItemArr2[1]);
 690|                GenerateItemList.Add(characterItem);
 691|            }
 692|            int GenerateItemNeedCount = runtime.Items[practiseItem.GenerateItemNeedCost.ToString()].Item1;
 693|            int GenerateItemNeedExp = (7 - IQ / 15) * practiseItem.GenerateItemNeedExp;
 694|
 695|            if (ExpForMakeItem >= GenerateItemNeedExp && GenerateItemNeedCount  >= GenerateItemList.Count)
 696|            {
 697|                //随机选择练出的物品
 698|                var pickItem = Jyx2.Middleware.Tools.GetRandomElement(GenerateItemList);
 699|
 700|                //已经有物品
 701|                if (runtime.HaveItemBool(pickItem.Id))
 702|                {
 703|                    runtime.AddItem(pickItem.Id, 1);
 704|                }
 705|                else
 706|                {
 707|                    runtime.AddItem(pickItem.Id, 1 + Random.Range(0, 3));
 708|                }
 709|
 710|                runtime.AddItem(practiseItem.GenerateItemNeedCost, -pickItem.Count);
 711|                ExpForMakeItem = 0;
 712|                return $"{Name} 制造出 {LuaToCsBridge.ItemTable[pickItem.Id].Name}\n";
 713|            }
 714|
 715|            return "";
 716|        }
 717|
 718|        /// <summary>
 719|        /// 使用物品
 720|        /// </summary>
 721|        /// <param name="item"></param>
 722|        public void UseItem(LItemConfig item)
 723|        {
 724|            if (item == null)
 725|                return;
 726|
 727|            this.Tili += item.AddTili;
 728|            //吃药机制
 729|            //参考：https://github.com/ZhanruiLiang/jinyong-legend
 730|            int add = item.AddHp - this.Hurt / 2 + Random.Range(0, 10);
 731|            if (add <= 0)
 732|            {
 733|                add = 5 + Random.Range(0, 5);
 734|            }
 735|            this.Hurt -= item.AddHp / 4;
 736|            this.SetHPAndRefreshHudBar(this.Hp + add);
 737|            this.MaxHp += item.AddMaxHp;
 738|            this.Mp += item.AddMp;
 739|            this.MaxMp += item.AddMaxMp;
 740|            this.Poison += item.ChangePoisonLevel / 2;
 741|            this.Heal += item.Heal;
 742|            this.DePoison += item.DePoison;
 743|            this.AntiPoison += item.AntiPoison;
 744|            this.UsePoison += item.UsePoison;
 745|
 746|            this.Attack += item.Attack;
 747|            this.Defence += item.Defence;
 748|            this.Qinggong += item.Qinggong;
 749|
 750|            this.Quanzhang += item.Quanzhang;
 751|            this.Yujian += item.Yujian;
 752|            this.Shuadao += item.Shuadao;
 753|            this.Qimen += item.Qimen;
 754|            this.Anqi += item.Anqi;
 755|
 756|            this.Pinde += item.AddPinde;
 757|            this.AttackPoison += item.AttackPoison;
 758|
 759|            if (item.ChangeMPType == 2)
 760|            {
 761|                this.MpType = 2;
 762|            }
 763|
 764|            if (item.Zuoyouhubo == 1)
 765|            {
 766|                this.Zuoyouhubo = 1;
 767|            }
 768|
 769|            if (CanFinishedItem())
 770|            {
 771|                if (item.Skill != null)
 772|                {
 773|                    this.LearnMagic(item.Skill);
 774|                }
 775|
 776|                this.ExpForItem = 0;
 777|            }
 778|
 779|            this.LimitAllAttrs();
 780|        }
 781|
 782|        /// <summary>
 783|        /// 卸下物品（装备）
 784|        /// </summary>
 785|        /// <param name="item"></param>
 786|        public void UnequipItem(LItemConfig item)
 787|        {
 788|            if (item == null)
 789|                return;
 790|
 791|            //在卸载装备流程中清理角色的装备属性值
 792|            if (Weapon == item.Id)
 793|            {
 794|                Weapon = -1;
 795|            }
 796|            else if (Armor == item.Id)
 797|            {
 798|                Armor = -1;
 799|            }
 800|            else
 801|            {
 802|                return;
 803|            }
 804|
 805|            runtime.SetItemUser(item.Id, -1);
 806|            this.Tili -= item.AddTili;
 807|            this.SetHPAndRefreshHudBar(this.Hp - item.AddHp);
 808|            this.MaxHp -= item.AddMaxHp;
 809|            this.Mp -= item.AddMp;
 810|            this.MaxMp -= item.AddMaxMp;
 811|            this.Poison -= item.ChangePoisonLevel;
 812|            this.Heal -= item.Heal;
 813|            this.DePoison -= item.DePoison;
 814|            this.AntiPoison -= item.AntiPoison;
 815|            this.UsePoison -= item.UsePoison;
 816|
 817|            this.Attack -= item.Attack;
 818|            this.Defence -= item.Defence;
 819|            this.Qinggong -= item.Qinggong;
 820|
 821|            this.Quanzhang -= item.Quanzhang;
 822|            this.Yujian -= item.Yujian;
 823|            this.Shuadao -= item.Shuadao;
 824|            this.Qimen -= item.Qimen;
 825|
 826|            this.Pinde -= item.AddPinde;
 827|            this.AttackPoison -= item.AttackPoison;
 828|
 829|            this.LimitAllAttrs();
 830|        }
 831|
 832|        public bool CanFinishedItem()
 833|        {
 834|            if (this.ExpForItem >= GetFinishedExpForItem())
 835|            {
 836|                return true;
 837|            }
 838|
 839|            return false;
 840|        }
 841|
 842|        public int GetFinishedExpForItem()
 843|        {
 844|            return GetFinishedExpForItem(GetXiulianItem());
 845|        }
 846|
 847|        /// <summary>
 848|        /// 获得修炼所需经验
 849|        /// </summary>
 850|        /// <param name="item"></param>
 851|        /// <returns></returns>
 852|        public int GetFinishedExpForItem(LItemConfig item)
 853|        {
 854|            if (item == null || (int)item.ItemType != 2 || item.NeedExp < 0)
 855|            {
 856|                return GameConst.MAX_EXP;
 857|            }
 858|
 859|            int multiple = 7 - this.IQ / 15;
 860|            if (multiple <= 0)
 861|            {
 862|                multiple = 1;
 863|            }
 864|
 865|            //有关联武学的，如已满级则不可修炼
 866|            if (item.Skill != null)
 867|            {
 868|                int magic_level_index = GetWugongLevel(item.Skill);
 869|                if (magic_level_index == GameConst.MAX_SKILL_LEVEL)
 870|                {
 871|                    return GameConst.MAX_EXP;
 872|                }
 873|
 874|                //初次修炼和从1级升到2级的是一样的
 875|                if (magic_level_index > 0)
 876|                {
 877|                    multiple *= magic_level_index;
 878|                }
 879|            }
 880|            else
 881|            {
 882|                multiple *= 2;
 883|            }
 884|
 885|            return item.NeedExp * multiple;
 886|        }
 887|
 888|        #endregion
 889|
 890|        public int GetWugongLevel(int wugongId)
 891|        {
 892|            foreach (var wugong in Wugongs)
 893|            {
 894|                if (wugong.Key == wugongId)
 895|                    return wugong.GetLevel();
 896|            }
 897|
 898|            return 0;
 899|        }
 900|
 901|
 902|        public LRoleConfig Data
 903|        {
 904|            get
 905|            {
 906|                if (_data == null)
 907|                {
 908|                    BindKey();
 909|                }
 910|
 911|                return _data;
 912|            }
 913|        }
 914|
 915|        private LRoleConfig _data;
 916|
 917|        public BattleRole View { get; set; }
 918|
 919|        #region 战斗相关
 920|
 921|        public BattleFieldModel BattleModel;
 922|
 923|        //是否在战斗中
 924|        private bool _isInBattle = false;
 925|
 926|        //所属队伍，主角方为0
 927|        public int team;
 928|
 929|        //集气数量
 930|        public float sp;
 931|
 932|        //AI
 933|        public bool isAI;
 934|
 935|        private BattleBlockVector _pos;
 936|
 937|        //位置
 938|        public BattleBlockVector Pos
 939|        {
 940|            get { return _pos; }
 941|            set
 942|            {
 943|                if (_pos == value)
 944|                    return;
 945|                _pos = value;
 946|                UpdateViewPostion();
 947|            }
 948|        }
 949|
 950|        public void UpdateViewPostion()
 951|        {
 952|            BattleBlockData posData = BattleboxHelper.Instance.GetBlockData(Pos.X, Pos.Y);
 953|            View.SetPosition(posData.WorldPos);
 954|        }
 955|
 956|        //移动过的格子数
 957|        public int movedStep = 0;
 958|
 959|        //是否已经行动
 960|        public bool isActed = false;
 961|        public bool isWaiting = false; //正在等待
 962|
 963|        public void EnterBattle()
 964|        {
 965|            if (_isInBattle) return;
 966|
 967|            _isInBattle = true;
 968|
 969|            View.LazyInitAnimator();
 970|
 971|            //修复当前武功
 972|            if (CurrentSkill >= Wugongs.Count)
 973|            {
 974|                CurrentSkill = 0;
 975|            }
 976|            _currentSkill = Wugongs[CurrentSkill];
 977|            SwitchAnimationToSkill(_currentSkill, true);
 978|        }
 979|
 980|        public void SetHPAndRefreshHudBar(int hp)
 981|        {
 982|            Hp = hp;
 983|            View?.MarkHpBarIsDirty();
 984|        }
 985|
 986|        private SkillInstance _currentSkill = null;
 987|
 988|        public void SwitchAnimationToSkill(SkillInstance skill, bool force = false)
 989|        {
 990|            if (skill == null || (_currentSkill == skill && !force)) return;
 991|
 992|            //切换武学待机动作
 993|            View.SwitchSkillTo(skill);
 994|
 995|            _currentSkill = skill;
 996|        }
 997|
 998|        public void LeaveBattle()
 999|        {
1000|            _isInBattle = false;
1001|        }
1002|
1003|
1004|        public void TimeRun()
1005|        {
1006|            IncSp();
1007|        }
1008|
1009|        //集气槽增长 根据轻功来增加
1010|        public void IncSp()
1011|        {
1012|            sp += this.Qinggong / 4; //1f;
1013|        }
1014|
1015|        //获得行动力
1016|        //参考：https://github.com/ZhanruiLiang/jinyong-legend
1017|        public int GetMoveAbility()
1018|        {
1019|            if (Tili <= 5)
1020|                return 0; //金庸DOS版逻辑，体力小于等于5无法移动
1021|            int speed = this.Qinggong;
1022|
1023|            speed = speed / 15 - this.Hurt / 40;
1024|
1025|            if (speed < 0)
1026|            {
1027|                speed = 0;
1028|            }
1029|            return speed;
1030|        }
1031|
1032|        //是否是AI控制
1033|        bool IsAI()
1034|        {
1035|            return isAI;
1036|        }
1037|
1038|        public int CompareTo(RoleInstance other)
1039|        {
1040|            int result = this.team.CompareTo(other.team);
1041|            return result;
1042|        }
1043|
1044|        #endregion
1045|
1046|        #region 状态相关
1047|
1048|        public bool IsDead()
1049|        {
1050|            return Hp <= 0;
1051|        }
1052|
1053|        public void Resurrect()
1054|        {
1055|            SetHPAndRefreshHudBar(MaxHp);
1056|        }
1057|
1058|        //是否晕眩
1059|        private bool _isStun = false;
1060|
1061|        /// <summary>
1062|        /// 晕眩
1063|        /// </summary>
1064|        /// <param name="duration">等于0时不晕眩；大于0时晕眩{duration}秒；小于0时永久晕眩</param>
1065|        public void Stun(float duration = -1)
1066|        {
1067|            //记录晕眩状态
1068|            if (duration > 0)
1069|            {
1070|                _isStun = true;
1071|                View.ShowStun();
1072|                int frame = Convert.ToInt32(duration * 60);
1073|                Observable.TimerFrame(frame, FrameCountType.FixedUpdate)
1074|                    .Subscribe(ms => { StopStun(); });
1075|            }
1076|            //永久晕眩（需要手动停止晕眩）
1077|            else if (duration < 0)
1078|            {
1079|                _isStun = true;
1080|                View.ShowStun();
1081|            }
1082|        }
1083|
1084|        public void StopStun()
1085|        {
1086|            _isStun = false;
1087|            View.StopStun(_isInBattle);
1088|        }
1089|
1090|        //TODO:由于探索地图没有实例，所以晕眩状态暂时由UI决定 by Cherubinxxx
1091|        public bool IsStun()
1092|        {
1093|            return _isStun;
1094|        }
1095|
1096|        #endregion
1097|
1098|        //JYX2的休息逻辑，对应jinyong-legend  War_RestMenu
1099|        public void OnRest()
1100|        {
1101|            int addTili = 3 + Random.Range(0, 3);
1102|            Tili = Tools.Limit(Tili + addTili, 0, GameConst.MAX_ROLE_TILI);
1103|            if (Tili > 30)
1104|            {
1105|                int addHpMp = 3 + Random.Range(0, Tili / 10 - 2);
1106|                Hp = Tools.Limit(Hp + addHpMp, 0, MaxHp);
1107|                Mp = Tools.Limit(Mp + addHpMp, 0, MaxMp);
1108|            }
1109|        }
1110|
1111|        //学习武学逻辑，对应kyscpp int Role::learnMagic(int magic_id)
1112|        public int LearnMagic(int magicId)
1113|        {
1114|            if (magicId <= 0)
1115|                return -1;
1116|
1117|            foreach (var skill in Wugongs)
1118|            {
1119|                if (skill.Key == magicId)
1120|                {
1121|                    if (skill.Level < GameConst.MAX_SKILL_LEVEL)
1122|                    {
1123|                        skill.Level += 100;
1124|                        return 0;
1125|                    }
1126|                    else
1127|                    {
1128|                        return -2; //已经满级
1129|                    }
1130|                }
1131|            }
1132|
1133|            if (Wugongs.Count >= GameConst.MAX_SKILL_COUNT)
1134|                return -3; //武学已满
1135|
1136|            if (!LuaToCsBridge.SkillTable.ContainsKey(magicId))
1137|            {
1138|                Debug.LogError("试图添加不存在的武功, skillId: " + magicId);
1139|                return -4; //无此武学
1140|            }
1141|
1142|            SkillInstance w = new SkillInstance(magicId);
1143|            Wugongs.Add(w);
1144|            ResetSkillCasts();
1145|            return 0;
1146|        }
1147|
1148|        public string GetMPColor()
1149|        {
1150|            return MpType == 2 ? ColorStringDefine.Default : MpType == 1 ? ColorStringDefine.Mp_type1 : ColorStringDefine.Mp_type0;
1151|        }
1152|
1153|        public string GetHPColor1()
1154|        {
1155|            return Hurt > 20 ? ColorStringDefine.Hp_hurt_heavy : Hurt > 0 ? ColorStringDefine.Hp_hurt_light : ColorStringDefine.Default;
1156|        }
1157|
1158|        public string GetHPColor2()
1159|        {
1160|            return Poison > 0 ? ColorStringDefine.Hp_posion : ColorStringDefine.Default;
1161|        }
1162|
1163|        public int GetWeaponProperty(string propertyName)
1164|        {
1165|            return Weapon != -1 ? (int)Type.GetType("Jyx2.LItemConfig").GetProperty(propertyName).GetValue(GetWeapon(), null) : 0;
1166|        }
1167|
1168|        public int GetArmorProperty(string propertyName)
1169|        {
1170|            return Armor != -1 ? (int)Type.GetType("Jyx2.LItemConfig").GetProperty(propertyName).GetValue(GetArmor(), null) : 0;
1171|        }
1172|
1173|        /// <summary>
1174|        /// 获取武器武功配合加攻击力
1175|        ///
1176|        /// 计算方法参考：https://github.com/ZhanruiLiang/jinyong-legend
1177|        ///
1178|        /// 玄铁剑+玄铁剑法 攻击+100
1179|        /// 君子剑+玉女素心剑 攻击+50
1180|        /// 淑女剑+玉女素心剑 攻击+50
1181|        /// 血刀+血刀大法 攻击+50
1182|        /// 冷月宝刀+胡家刀法 攻击+70
1183|        /// 金蛇剑+金蛇剑法 攻击力+80
1184|        /// 霹雳狂刀+霹雳刀法 攻击+100
1185|        /// </summary>
1186|        /// <param name="wugong"></param>
1187|        /// <returns></returns>
1188|        public int GetExtraAttack(int wugongId)
1189|        {
1190|            LExtraConfig extra;
1191|            if (LuaToCsBridge.ExtraTable != null && LuaToCsBridge.ExtraTable.TryGetValue(Weapon, out extra))
1192|            {
1193|                if (extra.Wugong == wugongId)
1194|                {
1195|                    return extra.ExtraAttack;
1196|                }
1197|            }
1198|            return 0;
1199|        }
1200|
1201|
1202|        public RoleInstance Clone()
1203|        {
1204|            var data = ES3.Serialize(this);
1205|            var newRole = ES3.Deserialize<RoleInstance>(data);
1206|            return newRole;
1207|        }
1208|
1209|        public bool IsPlayerRole => this == GameRuntimeData.Instance.Player;
1210|    }
1211|}

2024-12-15 16:14:55,457 - INFO Retriever 0 - 

————————————————————————————————————————————————————————————————
2024-12-15 16:14:55,457 - INFO Retriever 0 - 当前窗口总长度：15
2024-12-15 16:14:55,457 - INFO Retriever 0 - 当前更新窗口长度：6
2024-12-15 16:14:55,457 - INFO Retriever 0 - 当前更新窗口长度：6
2024-12-15 16:14:55,458 - INFO Retriever 0 - ————————————————————————————————————————————————————————————————


2024-12-15 16:15:12,456 - INFO Retriever 0 - Agent主脑给出的回答为：根据对`RoleInstance.cs`文件的详细阅读，我发现该脚本中确实包含了与角色战斗动画相关的逻辑。特别是`SwitchAnimationToSkill`函数，该函数负责将角色的动画切换到当前技能对应的动画。如果需要将某个角色的所有战斗动画固定，而不是跟随技能招式变化，可能需要修改这个函数的逻辑，使其不再根据技能来切换动画，而是使用一个固定的动画。

接下来，我将读取另一个可能与指定角色战斗动画逻辑相关的文件`AnimancerState.cs`的内容，以进一步确认是否有必要修改该文件。
2024-12-15 16:15:12,456 - INFO Retriever 0 - 是否成功解析：True
2024-12-15 16:15:12,456 - INFO Retriever 0 - 

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
2024-12-15 16:15:12,456 - INFO Retriever 0 - Assistant:
2024-12-15 16:15:12,456 - INFO Retriever 0 - {
  "根据对`RoleInstance.cs`文件的详细阅读，我发现该脚本中确实包含了与角色战斗动画相关的逻辑。特别是`SwitchAnimationToSkill`函数，该函数负责将角色的动画切换到当前技能对应的动画。如果需要将某个角色的所有战斗动画固定，而不是跟随技能招式变化，可能需要修改这个函数的逻辑，使其不再根据技能来切换动画，而是使用一个固定的动画。": "",
  "接下来，我将读取另一个可能与指定角色战斗动画逻辑相关的文件`AnimancerState.cs`的内容，以进一步确认是否有必要修改该文件。": ""
}
2024-12-15 16:15:12,458 - INFO Retriever 0 - dict_keys(['根据对`RoleInstance.cs`文件的详细阅读，我发现该脚本中确实包含了与角色战斗动画相关的逻辑。特别是`SwitchAnimationToSkill`函数，该函数负责将角色的动画切换到当前技能对应的动画。如果需要将某个角色的所有战斗动画固定，而不是跟随技能招式变化，可能需要修改这个函数的逻辑，使其不再根据技能来切换动画，而是使用一个固定的动画。', '接下来，我将读取另一个可能与指定角色战斗动画逻辑相关的文件`AnimancerState.cs`的内容，以进一步确认是否有必要修改该文件。'])
2024-12-15 16:15:12,458 - WARNING Retriever 0 - Agent主脑给出的回答为：
2024-12-15 16:15:12,458 - WARNING Retriever 0 - {
  "根据对`RoleInstance.cs`文件的详细阅读，我发现该脚本中确实包含了与角色战斗动画相关的逻辑。特别是`SwitchAnimationToSkill`函数，该函数负责将角色的动画切换到当前技能对应的动画。如果需要将某个角色的所有战斗动画固定，而不是跟随技能招式变化，可能需要修改这个函数的逻辑，使其不再根据技能来切换动画，而是使用一个固定的动画。": "",
  "接下来，我将读取另一个可能与指定角色战斗动画逻辑相关的文件`AnimancerState.cs`的内容，以进一步确认是否有必要修改该文件。": ""
}
2024-12-15 16:15:12,458 - WARNING Retriever 0 - 该回答不符合格式要求，需重新生成。
2024-12-15 16:15:12,461 - INFO Retriever 0 - 

————————————————————————————————————————————————————————————————
2024-12-15 16:15:12,461 - INFO Retriever 0 - 当前窗口总长度：17
2024-12-15 16:15:12,461 - INFO Retriever 0 - 当前更新窗口长度：8
2024-12-15 16:15:12,461 - INFO Retriever 0 - 当前更新窗口长度：8
2024-12-15 16:15:12,462 - INFO Retriever 0 - ————————————————————————————————————————————————————————————————


2024-12-15 16:15:21,747 - INFO Retriever 0 - Agent主脑给出的回答为：{
    "read_file": {
        "file_path": "D:\\Unity\\jyx2\\Assets\\3rd\\Animancer\\Internal\\Core\\AnimancerState.cs"
    }
}
2024-12-15 16:15:21,748 - INFO Retriever 0 - 是否成功解析：True
2024-12-15 16:15:21,748 - INFO Retriever 0 - operation_type (__det_dir_action):
2024-12-15 16:15:21,749 - INFO Retriever 0 - read_file
2024-12-15 16:15:21,749 - INFO Retriever 0 - 

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
2024-12-15 16:15:21,749 - INFO Retriever 0 - Assistant:
2024-12-15 16:15:21,751 - INFO Retriever 0 - {
    "read_file": {
        "file_path": "D:\\Unity\\jyx2\\Assets\\3rd\\Animancer\\Internal\\Core\\AnimancerState.cs"
    }
}
2024-12-15 16:15:21,751 - INFO Retriever 0 - dict_keys(['read_file'])
2024-12-15 16:15:21,751 - INFO Retriever 0 - Agent主脑给出的行动：read_file
参数：{'file_path': 'D:\\Unity\\jyx2\\Assets\\3rd\\Animancer\\Internal\\Core\\AnimancerState.cs', 'top_path': 'D:/Unity/jyx2\\Assets', 'return_file_sum': <bound method TreeGenerationAction.return_file_sum of <Action.tree_gen_action.TreeGenerationAction object at 0x000001A807224BD0>>}
2024-12-15 16:15:21,793 - INFO Retriever 0 - Observer: 这是一个名为“AnimancerState.cs”的文件，该文件里的内容为：
由于脚本文件内容过长，暂时仅给出该脚本文件的内容总结:
- ### 总体概述
- **框架和模块化结构**：该脚本定义了一个名为 `AnimancerState` 的抽象类，它是 `Animancer` 框架中所有状态的基础。这个类继承自 `AnimancerNode` 并实现了 `IAnimationClipCollection` 接口。
- **主要功能和目标**：该脚本的主要目标是提供一个用于管理动画播放状态的基类，它支持动画的播放、暂停、停止、时间控制以及与其他动画状态的交互。

### 模块和功能
- **Graph 模块**：管理动画状态在 `AnimancerPlayable` 图中的位置，包括设置根节点、父节点和子节点。
- **Key and Clip 模块**：处理与动画剪辑相关的操作，如设置和获取键对象和剪辑。
- **Playing 模块**：控制动画的播放状态，包括播放、暂停、停止和淡入淡出。
- **Timing 模块**：处理动画的时间控制，包括时间、归一化时间、持续时间、剩余持续时间等。
- **Methods 模块**：包含更新、销毁、收集动画剪辑、转换为字符串、获取路径等方法。

### 类和函数
- **AnimancerState**：主要类，用于管理动画状态。
  - **SetRoot**：设置动画状态的根节点。
  - **SetParent**：设置动画状态的父节点。
  - **IsPlaying**：获取或设置动画是否正在播放。
  - **Time**：获取或设置动画的当前时间。
  - **Play**：立即播放动画。
  - **Stop**：立即停止动画。
- **Transition<TState>**：抽象类，用于创建和转换动画状态。

### 实现逻辑
- **Graph 模块**：通过 `SetRoot` 和 `SetParent` 方法管理动画状态在图中的位置。
- **Playing 模块**：通过 `IsPlaying`、`Play` 和 `Stop` 方法控制动画的播放状态。
- **Timing 模块**：通过 `Time`、`NormalizedTime`、`Duration` 和 `RemainingDuration` 等属性控制动画的时间。
- **Methods 模块**：包含各种辅助方法，如更新、销毁、收集动画剪辑等。
<file_info>
<function_info>
函数名: Animancer
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 16
<function_comments>
    /// <summary>
    /// Base class for all states in an <see cref="AnimancerPlayable"/> graph which manages one or more
    /// <see cref="Playable"/>s.
    /// </summary>
    /// 
    /// <remarks>
    /// This class can be used as a custom yield instruction to wait until the animation either stops playing or
    /// reaches its end.
    /// <para></para>
    /// Documentation: <see href="https://kybernetik.com.au/animancer/docs/manual/playing/states">States</see>
    /// </remarks>
    /// https://kybernetik.com.au/animancer/api/Animancer/AnimancerState
    /// 
        /// <summary>The <see cref="AnimancerPlayable"/> at the root of the graph.</summary>
        /// <summary>The object which receives the output of the <see cref="Playable"/>.</summary>
        /// <summary>Connects this state to the `parent` mixer at the specified `index`.</summary>
        /// <remarks>
        /// Use <see cref="AnimancerLayer.AddChild(AnimancerState)"/> instead of this method to connect a state to an
        /// available port on a layer.
        /// </remarks>
        /// <summary>[Internal]
        /// Called by <see cref="AnimancerNode.OnAddChild(IList{AnimancerState}, AnimancerState)"/> if the specified
        /// port is already occupied so it can be cleared without triggering any other calls.
        /// </summary>
        /// <summary>
        /// The <see cref="AnimancerNode.Weight"/> of this state multiplied by the <see cref="AnimancerNode.Weight"/> of each of
        /// its parents down the hierarchy to determine how much this state affects the final output.
        /// </summary>
        /// <exception cref="NullReferenceException">This state has no <see cref="AnimancerNode.Parent"/>.</exception>
        /// <inheritdoc/>
        /// <summary>
        /// The index of the <see cref="AnimancerLayer"/> this state is connected to (determined by the
        /// <see cref="Parent"/>).
        /// </summary>
        /// <summary>
        /// The object used to identify this state in the root <see cref="AnimancerPlayable.States"/> dictionary.
        /// Can be null.
        /// </summary>
        /// <summary>The <see cref="AnimationClip"/> which this state plays (if any).</summary>
        /// <exception cref="NotSupportedException">This state type doesn't have a clip and you try to set it.</exception>
        /// <summary>The main object to show in the Inspector for this state (if any).</summary>
        /// <exception cref="NotSupportedException">This state type doesn't have a main object and you try to set it.</exception>
        /// <exception cref="InvalidCastException">This state can't use the assigned value.</exception>
        /// <summary>
        /// Sets the `currentObject` and calls <see cref="AnimancerNode.RecreatePlayable"/>. If the `currentObject` was
        /// being used as the <see cref="Key"/> then it is changed as well.
        /// </summary>
        /// <exception cref="ArgumentNullException">The `newObject` is null.</exception>
        /// <summary>The average velocity of the root motion caused by this state.</summary>
        /// <summary>Is the <see cref="Time"/> automatically advancing?</summary>
        /// <summary>Has <see cref="_IsPlaying"/> changed since it was last applied to the <see cref="Playable"/>.</summary>
        /// <remarks>
        /// Playables start playing by default so we start dirty to pause it during the first update (unless
        /// <see cref="IsPlaying"/> is set to true before that).
        /// </remarks>
        /// <summary>Is the <see cref="Time"/> automatically advancing?</summary>
        ///
        /// <example><code>
        /// void IsPlayingExample(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.States.GetOrCreate(clip);
        ///
        ///     if (state.IsPlaying)
        ///         Debug.Log(clip + " is playing");
        ///     else
        ///         Debug.Log(clip + " is paused");
        ///
        ///     state.IsPlaying = false;// Pause the animation.
        ///
        ///     state.IsPlaying = true;// Unpause the animation.
        /// }
        /// </code></example>
        /// <summary>Called when the value of <see cref="IsPlaying"/> is changed.</summary>
        /// <summary>Creates and assigns the <see cref="Playable"/> managed by this state.</summary>
        /// <remarks>This method also applies the <see cref="AnimancerNode.Speed"/> and <see cref="IsPlaying"/>.</remarks>
        /// <summary>
        /// Returns true if this state is playing and is at or fading towards a non-zero
        /// <see cref="AnimancerNode.Weight"/>.
        /// </summary>
        /// <summary>
        /// Returns true if this state is not playing and is at 0 <see cref="AnimancerNode.Weight"/>.
        /// </summary>
        /// <summary>Plays this state immediately, without any blending.</summary>
        /// <remarks>
        /// Sets <see cref="IsPlaying"/> = true, <see cref="AnimancerNode.Weight"/> = 1, and clears the
        /// <see cref="Events"/> (unless <see cref="AutomaticallyClearEvents"/> is disabled).
        /// <para></para>
        /// This method does not change the <see cref="Time"/> so it will continue from its current value.
        /// </remarks>
        /// <summary>Stops the animation and makes it inactive immediately so it no longer affects the output.</summary>
        /// <remarks>
        /// Sets <see cref="AnimancerNode.Weight"/> = 0, <see cref="IsPlaying"/> = false, <see cref="Time"/> = 0, and
        /// clears the <see cref="Events"/> (unless <see cref="AutomaticallyClearEvents"/> is disabled).
        /// <para></para>
        /// To freeze the animation in place without ending it, you only need to set <see cref="IsPlaying"/> = false
        /// instead. Or to freeze all animations, you can call <see cref="AnimancerPlayable.PauseGraph"/>.
        /// </remarks>
        /// <summary>
        /// Called by <see cref="AnimancerNode.StartFade"/>.
        /// Clears the <see cref="Events"/> (unless <see cref="AutomaticallyClearEvents"/> is disabled).
        /// </summary>
        /// <summary>
        /// The current time of the <see cref="Playable"/>, retrieved by <see cref="Time"/> whenever the
        /// <see cref="_TimeFrameID"/> is different from the <see cref="AnimancerPlayable.FrameID"/>.
        /// </summary>
        /// <summary>
        /// Indicates whether the <see cref="_Time"/> needs to be assigned to the <see cref="Playable"/> next update.
        /// </summary>
        /// <remarks>
        /// <see cref="EventDispatcher"/> executes after all other playables, at which point changes can still be made to
        /// their time but not their weight which means that if we set the time immediately then it can be out of sync
        /// with the weight. For example, if an animation ends and you play another, the first animation would be
        /// stopped and rewinded to the start but would still be at full weight so it would show its first frame before
        /// the new animation actually takes effect (even if the previous animation was not looping).
        /// <para></para>
        /// So instead, we simply delay setting the actual playable time until the next update so that time and weight
        /// are always in sync.
        /// </remarks>
        /// <summary>
        /// The <see cref="AnimancerPlayable.FrameID"/> from when the <see cref="Time"/> was last retrieved from the
        /// <see cref="Playable"/>.
        /// </summary>
        /// <summary>The number of seconds that have passed since the start of this animation.</summary>
        ///
        /// <remarks>
        /// This value will continue increasing after the animation passes the end of its <see cref="Length"/> while
        /// the animated object either freezes in place or starts again from the beginning according to whether it is
        /// looping or not.
        /// <para></para>
        /// This property internally uses <see cref="RawTime"/> whenever the value is out of date or gets changed.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds (except resetting it to 0).</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     // Skip 0.5 seconds into the animation:
        ///     state.Time = 0.5f;
        ///
        ///     // Skip 50% of the way through the animation (0.5 in a range of 0 to 1):
        ///     state.NormalizedTime = 0.5f;
        ///
        ///     // Skip to the end of the animation and play backwards.
        ///     state.NormalizedTime = 1;
        ///     state.Speed = -1;
        /// }
        /// </code></example>
        /// <summary>
        /// The internal implementation of <see cref="Time"/> which directly gets and sets the underlying value.
        /// </summary>
        /// <remarks>
        /// Setting this value actually calls <see cref="PlayableExtensions.SetTime"/> twice to ensure that animation
        /// events aren't triggered incorrectly. Calling it only once would trigger any animation events between the
        /// previous time and the new time. So if an animation plays to the end and you set the time back to 0 (such as
        /// by calling <see cref="Stop"/> or playing a different animation), the next time that animation played it
        /// would immediately trigger all of its events, then play through and trigger them normally as well.
        /// </remarks>
        /// <summary>
        /// The <see cref="Time"/> of this state as a portion of the animation's <see cref="Length"/>, meaning the
        /// value goes from 0 to 1 as it plays from start to end, regardless of how long that actually takes.
        /// </summary>
        /// 
        /// <remarks>
        /// This value will continue increasing after the animation passes the end of its <see cref="Length"/> while
        /// the animated object either freezes in place or starts again from the beginning according to whether it is
        /// looping or not.
        /// <para></para>
        /// The fractional part of the value (<c>NormalizedTime % 1</c>) is the percentage (0-1) of progress in the
        /// current loop while the integer part (<c>(int)NormalizedTime</c>) is the number of times the animation has
        /// been looped.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed to a value other than 0 in runtime builds.</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     // Skip 0.5 seconds into the animation:
        ///     state.Time = 0.5f;
        ///
        ///     // Skip 50% of the way through the animation (0.5 in a range of 0 to 1):
        ///     state.NormalizedTime = 0.5f;
        ///
        ///     // Skip to the end of the animation and play backwards.
        ///     state.NormalizedTime = 1;
        ///     state.Speed = -1;
        /// }
        /// </code></example>
        /// <summary>Prevents the <see cref="RawTime"/> from being applied.</summary>
        /// <summary>[Pro-Only]
        /// The <see cref="NormalizedTime"/> after which the <see cref="AnimancerEvent.Sequence.OnEnd"/> callback will
        /// be invoked every frame.
        /// </summary>
        /// <remarks>
        /// This is a wrapper around <see cref="AnimancerEvent.Sequence.NormalizedEndTime"/> so that if the value has
        /// not been set (<see cref="float.NaN"/>) it can be determined based on the
        /// <see cref="AnimancerNode.EffectiveSpeed"/>: positive speed ends at 1 and negative speed ends at 0.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds.</em>
        /// </remarks>
        /// <summary>
        /// The number of seconds the animation will take to play fully at its current
        /// <see cref="AnimancerNode.EffectiveSpeed"/>.
        /// </summary>
        /// 
        /// <remarks>
        /// For the time remaining from now until it reaches the end, use <see cref="RemainingDuration"/> instead.
        /// <para></para>
        /// Setting this value modifies the <see cref="AnimancerNode.EffectiveSpeed"/>, not the <see cref="Length"/>.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds.</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     state.Duration = 1;// Play fully in 1 second.
        ///     state.Duration = 2;// Play fully in 2 seconds.
        ///     state.Duration = 0.5f;// Play fully in half a second.
        ///     state.Duration = -1;// Play backwards fully in 1 second.
        ///     state.NormalizedTime = 1; state.Duration = -1;// Play backwards from the end in 1 second.
        /// }
        /// </code></example>
        /// <summary>
        /// The number of seconds this state will take to go from its current <see cref="NormalizedTime"/> to the
        /// <see cref="NormalizedEndTime"/> at its current <see cref="AnimancerNode.EffectiveSpeed"/>.
        /// </summary>
        /// 
        /// <remarks>
        /// For the time it would take to play fully from the start, use the <see cref="Duration"/> instead.
        /// <para></para>
        /// Setting this value modifies the <see cref="AnimancerNode.EffectiveSpeed"/>, not the <see cref="Length"/>.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds.</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     state.RemainingDuration = 1;// Play from the current time to the end in 1 second.
        ///     state.RemainingDuration = 2;// Play from the current time to the end in 2 seconds.
        ///     state.RemainingDuration = 0.5f;// Play from the current time to the end in half a second.
        ///     state.RemainingDuration = -1;// Play from the current time away from the end.
        /// }
        /// </code></example>
        /// <summary>The total time this state would take to play in seconds when <see cref="AnimancerNode.Speed"/> = 1.</summary>
        /// <summary>Will this state loop back to the start when it reaches the end?</summary>
        /// <summary>
        /// Updates the <see cref="AnimancerNode.Weight"/> for fading, applies it to this state's port on the parent
        /// mixer, and plays or pauses the <see cref="Playable"/> if its state is dirty.
        /// </summary>
        /// <remarks>
        /// If the <see cref="Parent"/>'s <see cref="AnimancerNode.KeepChildrenConnected"/> is set to false, this
        /// method will also connect/disconnect this node from the <see cref="Parent"/> in the playable graph.
        /// </remarks>
        /// <summary>Destroys the <see cref="Playable"/> and cleans up this state.</summary>
        /// <remarks>
        /// This method is NOT called automatically, so when implementing a custom state type you must use
        /// <see cref="AnimancerPlayable.Disposables"/> if you need to guarantee that things will get cleaned up.
        /// </remarks>
        /// <summary>[<see cref="IAnimationClipCollection"/>] Gathers all the animations in this state.</summary>
        /// <summary>
        /// Returns true if the animation is playing and has not yet passed the
        /// <see cref="AnimancerEvent.Sequence.endEvent"/>.
        /// </summary>
        /// <remarks>
        /// This method is called by <see cref="IEnumerator.MoveNext"/> so this object can be used as a custom yield
        /// instruction to wait until it finishes.
        /// </remarks>
        /// <summary>
        /// Returns the <see cref="AnimancerNode.DebugName"/> if one is set, otherwise a string describing the type of this
        /// state and the name of the <see cref="MainObject"/>.
        /// </summary>
        /// <summary>[Editor-Only] Returns a custom drawer for this state.</summary>
        /// <inheritdoc/>
        /// <summary>Returns the hierarchy path of this state through its <see cref="Parent"/>s.</summary>
        /// <summary>Appends the hierarchy path of this state through its <see cref="Parent"/>s.</summary>
        /// <summary>Appends "[Index] -> GetType().Name".</summary>
        /// <summary>
        /// Base class for serializable <see cref="ITransition"/>s which can create a particular type of
        /// <see cref="AnimancerState"/> when passed into <see cref="AnimancerPlayable.Play(ITransition)"/>.
        /// </summary>
        /// <remarks>
        /// Unfortunately the tool used to generate this documentation does not currently support nested types with
        /// identical names, so only one <c>Transition</c> class will actually have a documentation page.
        /// <para></para>
        /// Even though it has the <see cref="SerializableAttribute"/>, this class won't actually get serialized
        /// by Unity because it's generic and abstract. Each child class still needs to include the attribute.
        /// <para></para>
        /// Documentation: <see href="https://kybernetik.com.au/animancer/docs/manual/transitions">Transitions</see>
        /// </remarks>
        /// https://kybernetik.com.au/animancer/api/Animancer/Transition_1
        /// 
            /// <summary>[<see cref="SerializeField"/>] The amount of time the transition will take (in seconds).</summary>
            /// <exception cref="ArgumentOutOfRangeException">Thrown when setting the value to a negative number.</exception>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// Indicates what the value of <see cref="AnimancerState.IsLooping"/> will be for the created state.
            /// Returns false unless overridden.
            /// </summary>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// Determines what <see cref="NormalizedTime"/> to start the animation at.
            /// Returns <see cref="float.NaN"/> unless overridden.
            /// </summary>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// Determines how fast the animation plays (1x = normal speed).
            /// Returns 1 unless overridden.
            /// </summary>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// The maximum amount of time the animation is expected to take (in seconds).
            /// </summary>
            /// <remarks>The actual duration can vary in states like <see cref="MixerState"/>.</remarks>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// The <see cref="Motion.averageAngularSpeed"/> that the created state will have.
            /// </summary>
            /// <remarks>The actual average velocity can vary in states like <see cref="MixerState"/>.</remarks>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// The <see cref="Motion.averageSpeed"/> that the created state will have.
            /// </summary>
            /// <remarks>The actual average velocity can vary in states like <see cref="MixerState"/>.</remarks>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <remarks>This property returns the <see cref="AnimancerEvent.Sequence.Serializable.Sequence"/>.</remarks>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// <para></para>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// <see cref="State"/> is simply a shorthand for casting this to <typeparamref name="TState"/>.
            /// </summary>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// </summary>
            /// 
            /// <remarks>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// This property is shorthand for casting the <see cref="BaseState"/> to <typeparamref name="TState"/>.
            /// </remarks>
            /// 
            /// <exception cref="InvalidCastException">
            /// The <see cref="BaseState"/> is not actually a <typeparamref name="TState"/>. This should only
            /// happen if a different type of state was created by something else and registered using the
            /// <see cref="Key"/>, causing this <see cref="AnimancerPlayable.Play(ITransition)"/> to pass that
            /// state into <see cref="Apply"/> instead of calling <see cref="CreateState"/> to make the correct type of
            /// state.
            /// </exception>
            /// <summary>Indicates whether this transition can create a valid <see cref="AnimancerState"/>.</summary>
            /// <summary>The <see cref="AnimancerState.Key"/> which the created state will be registered with.</summary>
            /// <remarks>Returns <c>this</c> unless overridden.</remarks>
            /// <summary>
            /// When a transition is passed into <see cref="AnimancerPlayable.Play(ITransition)"/>, this property
            /// determines which <see cref="Animancer.FadeMode"/> will be used.
            /// </summary>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>[<see cref="ITransition"/>]
            /// Sets the <see cref="BaseState"/> and applies any other modifications to the `state`.
            /// </summary>
            /// <remarks>
            /// Called by <see cref="AnimancerPlayable.Play(ITransition)"/>.
            /// <para></para>
            /// This method also clears the <see cref="State"/> if necessary, so it will re-cast the
            /// <see cref="BaseState"/> when it gets accessed again.
            /// </remarks>
            /// <summary>The <see cref="AnimancerState.MainObject"/> that the created state will have.</summary>
            /// <summary>The display name of this transition.</summary>
            /// <summary>Returns the <see cref="Name"/> and type of this transition.</summary>
            /// <summary>[Editor-Only] Don't use Inspector Gadgets Nested Object Drawers.</summary>
</function_comments>
</function_info>
<function_info>
函数名: AnimancerState
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 31
<function_comments>
        /// <summary>The <see cref="AnimancerPlayable"/> at the root of the graph.</summary>
        /// <summary>The object which receives the output of the <see cref="Playable"/>.</summary>
        /// <summary>Connects this state to the `parent` mixer at the specified `index`.</summary>
        /// <remarks>
        /// Use <see cref="AnimancerLayer.AddChild(AnimancerState)"/> instead of this method to connect a state to an
        /// available port on a layer.
        /// </remarks>
        /// <summary>[Internal]
        /// Called by <see cref="AnimancerNode.OnAddChild(IList{AnimancerState}, AnimancerState)"/> if the specified
        /// port is already occupied so it can be cleared without triggering any other calls.
        /// </summary>
        /// <summary>
        /// The <see cref="AnimancerNode.Weight"/> of this state multiplied by the <see cref="AnimancerNode.Weight"/> of each of
        /// its parents down the hierarchy to determine how much this state affects the final output.
        /// </summary>
        /// <exception cref="NullReferenceException">This state has no <see cref="AnimancerNode.Parent"/>.</exception>
        /// <inheritdoc/>
        /// <summary>
        /// The index of the <see cref="AnimancerLayer"/> this state is connected to (determined by the
        /// <see cref="Parent"/>).
        /// </summary>
        /// <summary>
        /// The object used to identify this state in the root <see cref="AnimancerPlayable.States"/> dictionary.
        /// Can be null.
        /// </summary>
        /// <summary>The <see cref="AnimationClip"/> which this state plays (if any).</summary>
        /// <exception cref="NotSupportedException">This state type doesn't have a clip and you try to set it.</exception>
        /// <summary>The main object to show in the Inspector for this state (if any).</summary>
        /// <exception cref="NotSupportedException">This state type doesn't have a main object and you try to set it.</exception>
        /// <exception cref="InvalidCastException">This state can't use the assigned value.</exception>
        /// <summary>
        /// Sets the `currentObject` and calls <see cref="AnimancerNode.RecreatePlayable"/>. If the `currentObject` was
        /// being used as the <see cref="Key"/> then it is changed as well.
        /// </summary>
        /// <exception cref="ArgumentNullException">The `newObject` is null.</exception>
        /// <summary>The average velocity of the root motion caused by this state.</summary>
        /// <summary>Is the <see cref="Time"/> automatically advancing?</summary>
        /// <summary>Has <see cref="_IsPlaying"/> changed since it was last applied to the <see cref="Playable"/>.</summary>
        /// <remarks>
        /// Playables start playing by default so we start dirty to pause it during the first update (unless
        /// <see cref="IsPlaying"/> is set to true before that).
        /// </remarks>
        /// <summary>Is the <see cref="Time"/> automatically advancing?</summary>
        ///
        /// <example><code>
        /// void IsPlayingExample(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.States.GetOrCreate(clip);
        ///
        ///     if (state.IsPlaying)
        ///         Debug.Log(clip + " is playing");
        ///     else
        ///         Debug.Log(clip + " is paused");
        ///
        ///     state.IsPlaying = false;// Pause the animation.
        ///
        ///     state.IsPlaying = true;// Unpause the animation.
        /// }
        /// </code></example>
        /// <summary>Called when the value of <see cref="IsPlaying"/> is changed.</summary>
        /// <summary>Creates and assigns the <see cref="Playable"/> managed by this state.</summary>
        /// <remarks>This method also applies the <see cref="AnimancerNode.Speed"/> and <see cref="IsPlaying"/>.</remarks>
        /// <summary>
        /// Returns true if this state is playing and is at or fading towards a non-zero
        /// <see cref="AnimancerNode.Weight"/>.
        /// </summary>
        /// <summary>
        /// Returns true if this state is not playing and is at 0 <see cref="AnimancerNode.Weight"/>.
        /// </summary>
        /// <summary>Plays this state immediately, without any blending.</summary>
        /// <remarks>
        /// Sets <see cref="IsPlaying"/> = true, <see cref="AnimancerNode.Weight"/> = 1, and clears the
        /// <see cref="Events"/> (unless <see cref="AutomaticallyClearEvents"/> is disabled).
        /// <para></para>
        /// This method does not change the <see cref="Time"/> so it will continue from its current value.
        /// </remarks>
        /// <summary>Stops the animation and makes it inactive immediately so it no longer affects the output.</summary>
        /// <remarks>
        /// Sets <see cref="AnimancerNode.Weight"/> = 0, <see cref="IsPlaying"/> = false, <see cref="Time"/> = 0, and
        /// clears the <see cref="Events"/> (unless <see cref="AutomaticallyClearEvents"/> is disabled).
        /// <para></para>
        /// To freeze the animation in place without ending it, you only need to set <see cref="IsPlaying"/> = false
        /// instead. Or to freeze all animations, you can call <see cref="AnimancerPlayable.PauseGraph"/>.
        /// </remarks>
        /// <summary>
        /// Called by <see cref="AnimancerNode.StartFade"/>.
        /// Clears the <see cref="Events"/> (unless <see cref="AutomaticallyClearEvents"/> is disabled).
        /// </summary>
        /// <summary>
        /// The current time of the <see cref="Playable"/>, retrieved by <see cref="Time"/> whenever the
        /// <see cref="_TimeFrameID"/> is different from the <see cref="AnimancerPlayable.FrameID"/>.
        /// </summary>
        /// <summary>
        /// Indicates whether the <see cref="_Time"/> needs to be assigned to the <see cref="Playable"/> next update.
        /// </summary>
        /// <remarks>
        /// <see cref="EventDispatcher"/> executes after all other playables, at which point changes can still be made to
        /// their time but not their weight which means that if we set the time immediately then it can be out of sync
        /// with the weight. For example, if an animation ends and you play another, the first animation would be
        /// stopped and rewinded to the start but would still be at full weight so it would show its first frame before
        /// the new animation actually takes effect (even if the previous animation was not looping).
        /// <para></para>
        /// So instead, we simply delay setting the actual playable time until the next update so that time and weight
        /// are always in sync.
        /// </remarks>
        /// <summary>
        /// The <see cref="AnimancerPlayable.FrameID"/> from when the <see cref="Time"/> was last retrieved from the
        /// <see cref="Playable"/>.
        /// </summary>
        /// <summary>The number of seconds that have passed since the start of this animation.</summary>
        ///
        /// <remarks>
        /// This value will continue increasing after the animation passes the end of its <see cref="Length"/> while
        /// the animated object either freezes in place or starts again from the beginning according to whether it is
        /// looping or not.
        /// <para></para>
        /// This property internally uses <see cref="RawTime"/> whenever the value is out of date or gets changed.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds (except resetting it to 0).</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     // Skip 0.5 seconds into the animation:
        ///     state.Time = 0.5f;
        ///
        ///     // Skip 50% of the way through the animation (0.5 in a range of 0 to 1):
        ///     state.NormalizedTime = 0.5f;
        ///
        ///     // Skip to the end of the animation and play backwards.
        ///     state.NormalizedTime = 1;
        ///     state.Speed = -1;
        /// }
        /// </code></example>
        /// <summary>
        /// The internal implementation of <see cref="Time"/> which directly gets and sets the underlying value.
        /// </summary>
        /// <remarks>
        /// Setting this value actually calls <see cref="PlayableExtensions.SetTime"/> twice to ensure that animation
        /// events aren't triggered incorrectly. Calling it only once would trigger any animation events between the
        /// previous time and the new time. So if an animation plays to the end and you set the time back to 0 (such as
        /// by calling <see cref="Stop"/> or playing a different animation), the next time that animation played it
        /// would immediately trigger all of its events, then play through and trigger them normally as well.
        /// </remarks>
        /// <summary>
        /// The <see cref="Time"/> of this state as a portion of the animation's <see cref="Length"/>, meaning the
        /// value goes from 0 to 1 as it plays from start to end, regardless of how long that actually takes.
        /// </summary>
        /// 
        /// <remarks>
        /// This value will continue increasing after the animation passes the end of its <see cref="Length"/> while
        /// the animated object either freezes in place or starts again from the beginning according to whether it is
        /// looping or not.
        /// <para></para>
        /// The fractional part of the value (<c>NormalizedTime % 1</c>) is the percentage (0-1) of progress in the
        /// current loop while the integer part (<c>(int)NormalizedTime</c>) is the number of times the animation has
        /// been looped.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed to a value other than 0 in runtime builds.</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     // Skip 0.5 seconds into the animation:
        ///     state.Time = 0.5f;
        ///
        ///     // Skip 50% of the way through the animation (0.5 in a range of 0 to 1):
        ///     state.NormalizedTime = 0.5f;
        ///
        ///     // Skip to the end of the animation and play backwards.
        ///     state.NormalizedTime = 1;
        ///     state.Speed = -1;
        /// }
        /// </code></example>
        /// <summary>Prevents the <see cref="RawTime"/> from being applied.</summary>
        /// <summary>[Pro-Only]
        /// The <see cref="NormalizedTime"/> after which the <see cref="AnimancerEvent.Sequence.OnEnd"/> callback will
        /// be invoked every frame.
        /// </summary>
        /// <remarks>
        /// This is a wrapper around <see cref="AnimancerEvent.Sequence.NormalizedEndTime"/> so that if the value has
        /// not been set (<see cref="float.NaN"/>) it can be determined based on the
        /// <see cref="AnimancerNode.EffectiveSpeed"/>: positive speed ends at 1 and negative speed ends at 0.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds.</em>
        /// </remarks>
        /// <summary>
        /// The number of seconds the animation will take to play fully at its current
        /// <see cref="AnimancerNode.EffectiveSpeed"/>.
        /// </summary>
        /// 
        /// <remarks>
        /// For the time remaining from now until it reaches the end, use <see cref="RemainingDuration"/> instead.
        /// <para></para>
        /// Setting this value modifies the <see cref="AnimancerNode.EffectiveSpeed"/>, not the <see cref="Length"/>.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds.</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     state.Duration = 1;// Play fully in 1 second.
        ///     state.Duration = 2;// Play fully in 2 seconds.
        ///     state.Duration = 0.5f;// Play fully in half a second.
        ///     state.Duration = -1;// Play backwards fully in 1 second.
        ///     state.NormalizedTime = 1; state.Duration = -1;// Play backwards from the end in 1 second.
        /// }
        /// </code></example>
        /// <summary>
        /// The number of seconds this state will take to go from its current <see cref="NormalizedTime"/> to the
        /// <see cref="NormalizedEndTime"/> at its current <see cref="AnimancerNode.EffectiveSpeed"/>.
        /// </summary>
        /// 
        /// <remarks>
        /// For the time it would take to play fully from the start, use the <see cref="Duration"/> instead.
        /// <para></para>
        /// Setting this value modifies the <see cref="AnimancerNode.EffectiveSpeed"/>, not the <see cref="Length"/>.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds.</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     state.RemainingDuration = 1;// Play from the current time to the end in 1 second.
        ///     state.RemainingDuration = 2;// Play from the current time to the end in 2 seconds.
        ///     state.RemainingDuration = 0.5f;// Play from the current time to the end in half a second.
        ///     state.RemainingDuration = -1;// Play from the current time away from the end.
        /// }
        /// </code></example>
        /// <summary>The total time this state would take to play in seconds when <see cref="AnimancerNode.Speed"/> = 1.</summary>
        /// <summary>Will this state loop back to the start when it reaches the end?</summary>
        /// <summary>
        /// Updates the <see cref="AnimancerNode.Weight"/> for fading, applies it to this state's port on the parent
        /// mixer, and plays or pauses the <see cref="Playable"/> if its state is dirty.
        /// </summary>
        /// <remarks>
        /// If the <see cref="Parent"/>'s <see cref="AnimancerNode.KeepChildrenConnected"/> is set to false, this
        /// method will also connect/disconnect this node from the <see cref="Parent"/> in the playable graph.
        /// </remarks>
        /// <summary>Destroys the <see cref="Playable"/> and cleans up this state.</summary>
        /// <remarks>
        /// This method is NOT called automatically, so when implementing a custom state type you must use
        /// <see cref="AnimancerPlayable.Disposables"/> if you need to guarantee that things will get cleaned up.
        /// </remarks>
        /// <summary>[<see cref="IAnimationClipCollection"/>] Gathers all the animations in this state.</summary>
        /// <summary>
        /// Returns true if the animation is playing and has not yet passed the
        /// <see cref="AnimancerEvent.Sequence.endEvent"/>.
        /// </summary>
        /// <remarks>
        /// This method is called by <see cref="IEnumerator.MoveNext"/> so this object can be used as a custom yield
        /// instruction to wait until it finishes.
        /// </remarks>
        /// <summary>
        /// Returns the <see cref="AnimancerNode.DebugName"/> if one is set, otherwise a string describing the type of this
        /// state and the name of the <see cref="MainObject"/>.
        /// </summary>
        /// <summary>[Editor-Only] Returns a custom drawer for this state.</summary>
        /// <inheritdoc/>
        /// <summary>Returns the hierarchy path of this state through its <see cref="Parent"/>s.</summary>
        /// <summary>Appends the hierarchy path of this state through its <see cref="Parent"/>s.</summary>
        /// <summary>Appends "[Index] -> GetType().Name".</summary>
        /// <summary>
        /// Base class for serializable <see cref="ITransition"/>s which can create a particular type of
        /// <see cref="AnimancerState"/> when passed into <see cref="AnimancerPlayable.Play(ITransition)"/>.
        /// </summary>
        /// <remarks>
        /// Unfortunately the tool used to generate this documentation does not currently support nested types with
        /// identical names, so only one <c>Transition</c> class will actually have a documentation page.
        /// <para></para>
        /// Even though it has the <see cref="SerializableAttribute"/>, this class won't actually get serialized
        /// by Unity because it's generic and abstract. Each child class still needs to include the attribute.
        /// <para></para>
        /// Documentation: <see href="https://kybernetik.com.au/animancer/docs/manual/transitions">Transitions</see>
        /// </remarks>
        /// https://kybernetik.com.au/animancer/api/Animancer/Transition_1
        /// 
            /// <summary>[<see cref="SerializeField"/>] The amount of time the transition will take (in seconds).</summary>
            /// <exception cref="ArgumentOutOfRangeException">Thrown when setting the value to a negative number.</exception>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// Indicates what the value of <see cref="AnimancerState.IsLooping"/> will be for the created state.
            /// Returns false unless overridden.
            /// </summary>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// Determines what <see cref="NormalizedTime"/> to start the animation at.
            /// Returns <see cref="float.NaN"/> unless overridden.
            /// </summary>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// Determines how fast the animation plays (1x = normal speed).
            /// Returns 1 unless overridden.
            /// </summary>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// The maximum amount of time the animation is expected to take (in seconds).
            /// </summary>
            /// <remarks>The actual duration can vary in states like <see cref="MixerState"/>.</remarks>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// The <see cref="Motion.averageAngularSpeed"/> that the created state will have.
            /// </summary>
            /// <remarks>The actual average velocity can vary in states like <see cref="MixerState"/>.</remarks>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// The <see cref="Motion.averageSpeed"/> that the created state will have.
            /// </summary>
            /// <remarks>The actual average velocity can vary in states like <see cref="MixerState"/>.</remarks>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <remarks>This property returns the <see cref="AnimancerEvent.Sequence.Serializable.Sequence"/>.</remarks>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// <para></para>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// <see cref="State"/> is simply a shorthand for casting this to <typeparamref name="TState"/>.
            /// </summary>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// </summary>
            /// 
            /// <remarks>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// This property is shorthand for casting the <see cref="BaseState"/> to <typeparamref name="TState"/>.
            /// </remarks>
            /// 
            /// <exception cref="InvalidCastException">
            /// The <see cref="BaseState"/> is not actually a <typeparamref name="TState"/>. This should only
            /// happen if a different type of state was created by something else and registered using the
            /// <see cref="Key"/>, causing this <see cref="AnimancerPlayable.Play(ITransition)"/> to pass that
            /// state into <see cref="Apply"/> instead of calling <see cref="CreateState"/> to make the correct type of
            /// state.
            /// </exception>
            /// <summary>Indicates whether this transition can create a valid <see cref="AnimancerState"/>.</summary>
            /// <summary>The <see cref="AnimancerState.Key"/> which the created state will be registered with.</summary>
            /// <remarks>Returns <c>this</c> unless overridden.</remarks>
            /// <summary>
            /// When a transition is passed into <see cref="AnimancerPlayable.Play(ITransition)"/>, this property
            /// determines which <see cref="Animancer.FadeMode"/> will be used.
            /// </summary>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>[<see cref="ITransition"/>]
            /// Sets the <see cref="BaseState"/> and applies any other modifications to the `state`.
            /// </summary>
            /// <remarks>
            /// Called by <see cref="AnimancerPlayable.Play(ITransition)"/>.
            /// <para></para>
            /// This method also clears the <see cref="State"/> if necessary, so it will re-cast the
            /// <see cref="BaseState"/> when it gets accessed again.
            /// </remarks>
            /// <summary>The <see cref="AnimancerState.MainObject"/> that the created state will have.</summary>
            /// <summary>The display name of this transition.</summary>
            /// <summary>Returns the <see cref="Name"/> and type of this transition.</summary>
            /// <summary>[Editor-Only] Don't use Inspector Gadgets Nested Object Drawers.</summary>
</function_comments>
</function_info>
<function_info>
函数名: AppendDetails
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 857
</function_info>
<function_info>
函数名: AppendPath
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 908
</function_info>
<function_info>
函数名: AppendPortAndType
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 936
</function_info>
<function_info>
函数名: Apply
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1148
</function_info>
<function_info>
函数名: AverageAngularSpeed
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1027
<function_comments>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// The <see cref="Motion.averageSpeed"/> that the created state will have.
            /// </summary>
            /// <remarks>The actual average velocity can vary in states like <see cref="MixerState"/>.</remarks>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <remarks>This property returns the <see cref="AnimancerEvent.Sequence.Serializable.Sequence"/>.</remarks>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// <para></para>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// <see cref="State"/> is simply a shorthand for casting this to <typeparamref name="TState"/>.
            /// </summary>
</function_comments>
</function_info>
<function_info>
函数名: AverageVelocity
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1033
<function_comments>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <remarks>This property returns the <see cref="AnimancerEvent.Sequence.Serializable.Sequence"/>.</remarks>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// <para></para>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// <see cref="State"/> is simply a shorthand for casting this to <typeparamref name="TState"/>.
            /// </summary>
</function_comments>
</function_info>
<function_info>
函数名: AverageVelocity
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 236
<function_comments>
        /// <summary>Is the <see cref="Time"/> automatically advancing?</summary>
        /// <summary>Has <see cref="_IsPlaying"/> changed since it was last applied to the <see cref="Playable"/>.</summary>
        /// <remarks>
        /// Playables start playing by default so we start dirty to pause it during the first update (unless
        /// <see cref="IsPlaying"/> is set to true before that).
        /// </remarks>
        /// <summary>Is the <see cref="Time"/> automatically advancing?</summary>
        ///
        /// <example><code>
        /// void IsPlayingExample(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.States.GetOrCreate(clip);
        ///
        ///     if (state.IsPlaying)
        ///         Debug.Log(clip + " is playing");
        ///     else
        ///         Debug.Log(clip + " is paused");
        ///
        ///     state.IsPlaying = false;// Pause the animation.
        ///
        ///     state.IsPlaying = true;// Unpause the animation.
        /// }
</function_comments>
</function_info>
<function_info>
函数名: BaseState
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1063
</function_info>
<function_info>
函数名: CancelSetTime
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 564
<function_comments>
        /// <summary>[Pro-Only]
        /// The <see cref="NormalizedTime"/> after which the <see cref="AnimancerEvent.Sequence.OnEnd"/> callback will
        /// be invoked every frame.
        /// </summary>
        /// <remarks>
        /// This is a wrapper around <see cref="AnimancerEvent.Sequence.NormalizedEndTime"/> so that if the value has
        /// not been set (<see cref="float.NaN"/>) it can be determined based on the
        /// <see cref="AnimancerNode.EffectiveSpeed"/>: positive speed ends at 1 and negative speed ends at 0.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds.</em>
        /// </remarks>
</function_comments>
</function_info>
<function_info>
函数名: ClearParent
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 110
</function_info>
<function_info>
函数名: Clip
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 196
</function_info>
<function_info>
函数名: CreateDrawer
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 850
<function_comments>
        /// <inheritdoc/>
</function_comments>
</function_info>
<function_info>
函数名: CreatePlayable
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 305
</function_info>
<function_info>
函数名: CreateState
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1127
<function_comments>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>[<see cref="ITransition"/>]
            /// Sets the <see cref="BaseState"/> and applies any other modifications to the `state`.
            /// </summary>
            /// <remarks>
            /// Called by <see cref="AnimancerPlayable.Play(ITransition)"/>.
            /// <para></para>
            /// This method also clears the <see cref="State"/> if necessary, so it will re-cast the
            /// <see cref="BaseState"/> when it gets accessed again.
            /// </remarks>
</function_comments>
</function_info>
<function_info>
函数名: Destroy
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 746
</function_info>
<function_info>
函数名: Duration
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 624
</function_info>
<function_info>
函数名: EffectiveWeight
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 123
</function_info>
<function_info>
函数名: Events
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1044
<function_comments>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// <para></para>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// <see cref="State"/> is simply a shorthand for casting this to <typeparamref name="TState"/>.
            /// </summary>
</function_comments>
</function_info>
<function_info>
函数名: FadeDuration
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 977
</function_info>
<function_info>
函数名: FadeMode
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1119
<function_comments>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>[<see cref="ITransition"/>]
            /// Sets the <see cref="BaseState"/> and applies any other modifications to the `state`.
            /// </summary>
            /// <remarks>
            /// Called by <see cref="AnimancerPlayable.Play(ITransition)"/>.
            /// <para></para>
            /// This method also clears the <see cref="State"/> if necessary, so it will re-cast the
            /// <see cref="BaseState"/> when it gets accessed again.
            /// </remarks>
</function_comments>
</function_info>
<function_info>
函数名: GatherAnimationClips
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 771
<function_comments>
        /// <summary>
        /// Returns true if the animation is playing and has not yet passed the
        /// <see cref="AnimancerEvent.Sequence.endEvent"/>.
        /// </summary>
        /// <remarks>
        /// This method is called by <see cref="IEnumerator.MoveNext"/> so this object can be used as a custom yield
        /// instruction to wait until it finishes.
        /// </remarks>
</function_comments>
</function_info>
<function_info>
函数名: GetPath
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 894
</function_info>
<function_info>
函数名: ITransition.CreateState
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1135
<function_comments>
            /// <summary>[<see cref="ITransition"/>]
            /// Sets the <see cref="BaseState"/> and applies any other modifications to the `state`.
            /// </summary>
            /// <remarks>
            /// Called by <see cref="AnimancerPlayable.Play(ITransition)"/>.
            /// <para></para>
            /// This method also clears the <see cref="State"/> if necessary, so it will re-cast the
            /// <see cref="BaseState"/> when it gets accessed again.
            /// </remarks>
</function_comments>
</function_info>
<function_info>
函数名: IsActive
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 320
<function_comments>
        /// <summary>
        /// Returns true if this state is not playing and is at 0 <see cref="AnimancerNode.Weight"/>.
        /// </summary>
        /// <summary>Plays this state immediately, without any blending.</summary>
        /// <remarks>
        /// Sets <see cref="IsPlaying"/> = true, <see cref="AnimancerNode.Weight"/> = 1, and clears the
        /// <see cref="Events"/> (unless <see cref="AutomaticallyClearEvents"/> is disabled).
        /// <para></para>
        /// This method does not change the <see cref="Time"/> so it will continue from its current value.
        /// </remarks>
</function_comments>
</function_info>
<function_info>
函数名: IsLooping
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 995
<function_comments>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// Determines what <see cref="NormalizedTime"/> to start the animation at.
            /// Returns <see cref="float.NaN"/> unless overridden.
            /// </summary>
</function_comments>
</function_info>
<function_info>
函数名: IsLooping
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 702
<function_comments>
        /// <summary>
        /// Updates the <see cref="AnimancerNode.Weight"/> for fading, applies it to this state's port on the parent
        /// mixer, and plays or pauses the <see cref="Playable"/> if its state is dirty.
        /// </summary>
        /// <remarks>
        /// If the <see cref="Parent"/>'s <see cref="AnimancerNode.KeepChildrenConnected"/> is set to false, this
        /// method will also connect/disconnect this node from the <see cref="Parent"/> in the playable graph.
        /// </remarks>
</function_comments>
</function_info>
<function_info>
函数名: IsPlaying
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 273
</function_info>
<function_info>
函数名: IsPlayingAndNotEnding
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 783
</function_info>
<function_info>
函数名: IsStopped
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 325
<function_comments>
        /// <summary>Plays this state immediately, without any blending.</summary>
        /// <remarks>
        /// Sets <see cref="IsPlaying"/> = true, <see cref="AnimancerNode.Weight"/> = 1, and clears the
        /// <see cref="Events"/> (unless <see cref="AutomaticallyClearEvents"/> is disabled).
        /// <para></para>
        /// This method does not change the <see cref="Time"/> so it will continue from its current value.
        /// </remarks>
</function_comments>
</function_info>
<function_info>
函数名: IsValid
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1107
<function_comments>
            /// <summary>The <see cref="AnimancerState.Key"/> which the created state will be registered with.</summary>
            /// <remarks>Returns <c>this</c> unless overridden.</remarks>
            /// <summary>
            /// When a transition is passed into <see cref="AnimancerPlayable.Play(ITransition)"/>, this property
            /// determines which <see cref="Animancer.FadeMode"/> will be used.
            /// </summary>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>[<see cref="ITransition"/>]
            /// Sets the <see cref="BaseState"/> and applies any other modifications to the `state`.
            /// </summary>
            /// <remarks>
            /// Called by <see cref="AnimancerPlayable.Play(ITransition)"/>.
            /// <para></para>
            /// This method also clears the <see cref="State"/> if necessary, so it will re-cast the
            /// <see cref="BaseState"/> when it gets accessed again.
            /// </remarks>
</function_comments>
</function_info>
<function_info>
函数名: Key
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1113
<function_comments>
            /// <summary>
            /// When a transition is passed into <see cref="AnimancerPlayable.Play(ITransition)"/>, this property
            /// determines which <see cref="Animancer.FadeMode"/> will be used.
            /// </summary>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>[<see cref="ITransition"/>]
            /// Sets the <see cref="BaseState"/> and applies any other modifications to the `state`.
            /// </summary>
            /// <remarks>
            /// Called by <see cref="AnimancerPlayable.Play(ITransition)"/>.
            /// <para></para>
            /// This method also clears the <see cref="State"/> if necessary, so it will re-cast the
            /// <see cref="BaseState"/> when it gets accessed again.
            /// </remarks>
</function_comments>
</function_info>
<function_info>
函数名: Key
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 182
</function_info>
<function_info>
函数名: Layer
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 145
<function_comments>
        /// <summary>
        /// The index of the <see cref="AnimancerLayer"/> this state is connected to (determined by the
        /// <see cref="Parent"/>).
        /// </summary>
</function_comments>
</function_info>
<function_info>
函数名: LayerIndex
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 151
</function_info>
<function_info>
函数名: Length
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 699
</function_info>
<function_info>
函数名: MainObject
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1161
</function_info>
<function_info>
函数名: MainObject
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 205
</function_info>
<function_info>
函数名: MaximumDuration
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1021
</function_info>
<function_info>
函数名: Name
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1164
</function_info>
<function_info>
函数名: NestedObjectDrawers
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1189
</function_info>
<function_info>
函数名: NormalizedEndTime
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 581
</function_info>
<function_info>
函数名: NormalizedStartTime
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1001
</function_info>
<function_info>
函数名: NormalizedTime
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 548
</function_info>
<function_info>
函数名: Object
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 218
</function_info>
<function_info>
函数名: Object
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 9
<function_comments>
    /// <summary>
    /// Base class for all states in an <see cref="AnimancerPlayable"/> graph which manages one or more
    /// <see cref="Playable"/>s.
    /// </summary>
    /// 
    /// <remarks>
    /// This class can be used as a custom yield instruction to wait until the animation either stops playing or
    /// reaches its end.
    /// <para></para>
    /// Documentation: <see href="https://kybernetik.com.au/animancer/docs/manual/playing/states">States</see>
    /// </remarks>
    /// https://kybernetik.com.au/animancer/api/Animancer/AnimancerState
    /// 
        /// <summary>The <see cref="AnimancerPlayable"/> at the root of the graph.</summary>
        /// <summary>The object which receives the output of the <see cref="Playable"/>.</summary>
        /// <summary>Connects this state to the `parent` mixer at the specified `index`.</summary>
        /// <remarks>
        /// Use <see cref="AnimancerLayer.AddChild(AnimancerState)"/> instead of this method to connect a state to an
        /// available port on a layer.
        /// </remarks>
        /// <summary>[Internal]
        /// Called by <see cref="AnimancerNode.OnAddChild(IList{AnimancerState}, AnimancerState)"/> if the specified
        /// port is already occupied so it can be cleared without triggering any other calls.
        /// </summary>
        /// <summary>
        /// The <see cref="AnimancerNode.Weight"/> of this state multiplied by the <see cref="AnimancerNode.Weight"/> of each of
        /// its parents down the hierarchy to determine how much this state affects the final output.
        /// </summary>
        /// <exception cref="NullReferenceException">This state has no <see cref="AnimancerNode.Parent"/>.</exception>
        /// <inheritdoc/>
        /// <summary>
        /// The index of the <see cref="AnimancerLayer"/> this state is connected to (determined by the
        /// <see cref="Parent"/>).
        /// </summary>
        /// <summary>
        /// The object used to identify this state in the root <see cref="AnimancerPlayable.States"/> dictionary.
        /// Can be null.
        /// </summary>
        /// <summary>The <see cref="AnimationClip"/> which this state plays (if any).</summary>
        /// <exception cref="NotSupportedException">This state type doesn't have a clip and you try to set it.</exception>
        /// <summary>The main object to show in the Inspector for this state (if any).</summary>
        /// <exception cref="NotSupportedException">This state type doesn't have a main object and you try to set it.</exception>
        /// <exception cref="InvalidCastException">This state can't use the assigned value.</exception>
        /// <summary>
        /// Sets the `currentObject` and calls <see cref="AnimancerNode.RecreatePlayable"/>. If the `currentObject` was
        /// being used as the <see cref="Key"/> then it is changed as well.
        /// </summary>
        /// <exception cref="ArgumentNullException">The `newObject` is null.</exception>
        /// <summary>The average velocity of the root motion caused by this state.</summary>
        /// <summary>Is the <see cref="Time"/> automatically advancing?</summary>
        /// <summary>Has <see cref="_IsPlaying"/> changed since it was last applied to the <see cref="Playable"/>.</summary>
        /// <remarks>
        /// Playables start playing by default so we start dirty to pause it during the first update (unless
        /// <see cref="IsPlaying"/> is set to true before that).
        /// </remarks>
        /// <summary>Is the <see cref="Time"/> automatically advancing?</summary>
        ///
        /// <example><code>
        /// void IsPlayingExample(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.States.GetOrCreate(clip);
        ///
        ///     if (state.IsPlaying)
        ///         Debug.Log(clip + " is playing");
        ///     else
        ///         Debug.Log(clip + " is paused");
        ///
        ///     state.IsPlaying = false;// Pause the animation.
        ///
        ///     state.IsPlaying = true;// Unpause the animation.
        /// }
        /// </code></example>
        /// <summary>Called when the value of <see cref="IsPlaying"/> is changed.</summary>
        /// <summary>Creates and assigns the <see cref="Playable"/> managed by this state.</summary>
        /// <remarks>This method also applies the <see cref="AnimancerNode.Speed"/> and <see cref="IsPlaying"/>.</remarks>
        /// <summary>
        /// Returns true if this state is playing and is at or fading towards a non-zero
        /// <see cref="AnimancerNode.Weight"/>.
        /// </summary>
        /// <summary>
        /// Returns true if this state is not playing and is at 0 <see cref="AnimancerNode.Weight"/>.
        /// </summary>
        /// <summary>Plays this state immediately, without any blending.</summary>
        /// <remarks>
        /// Sets <see cref="IsPlaying"/> = true, <see cref="AnimancerNode.Weight"/> = 1, and clears the
        /// <see cref="Events"/> (unless <see cref="AutomaticallyClearEvents"/> is disabled).
        /// <para></para>
        /// This method does not change the <see cref="Time"/> so it will continue from its current value.
        /// </remarks>
        /// <summary>Stops the animation and makes it inactive immediately so it no longer affects the output.</summary>
        /// <remarks>
        /// Sets <see cref="AnimancerNode.Weight"/> = 0, <see cref="IsPlaying"/> = false, <see cref="Time"/> = 0, and
        /// clears the <see cref="Events"/> (unless <see cref="AutomaticallyClearEvents"/> is disabled).
        /// <para></para>
        /// To freeze the animation in place without ending it, you only need to set <see cref="IsPlaying"/> = false
        /// instead. Or to freeze all animations, you can call <see cref="AnimancerPlayable.PauseGraph"/>.
        /// </remarks>
        /// <summary>
        /// Called by <see cref="AnimancerNode.StartFade"/>.
        /// Clears the <see cref="Events"/> (unless <see cref="AutomaticallyClearEvents"/> is disabled).
        /// </summary>
        /// <summary>
        /// The current time of the <see cref="Playable"/>, retrieved by <see cref="Time"/> whenever the
        /// <see cref="_TimeFrameID"/> is different from the <see cref="AnimancerPlayable.FrameID"/>.
        /// </summary>
        /// <summary>
        /// Indicates whether the <see cref="_Time"/> needs to be assigned to the <see cref="Playable"/> next update.
        /// </summary>
        /// <remarks>
        /// <see cref="EventDispatcher"/> executes after all other playables, at which point changes can still be made to
        /// their time but not their weight which means that if we set the time immediately then it can be out of sync
        /// with the weight. For example, if an animation ends and you play another, the first animation would be
        /// stopped and rewinded to the start but would still be at full weight so it would show its first frame before
        /// the new animation actually takes effect (even if the previous animation was not looping).
        /// <para></para>
        /// So instead, we simply delay setting the actual playable time until the next update so that time and weight
        /// are always in sync.
        /// </remarks>
        /// <summary>
        /// The <see cref="AnimancerPlayable.FrameID"/> from when the <see cref="Time"/> was last retrieved from the
        /// <see cref="Playable"/>.
        /// </summary>
        /// <summary>The number of seconds that have passed since the start of this animation.</summary>
        ///
        /// <remarks>
        /// This value will continue increasing after the animation passes the end of its <see cref="Length"/> while
        /// the animated object either freezes in place or starts again from the beginning according to whether it is
        /// looping or not.
        /// <para></para>
        /// This property internally uses <see cref="RawTime"/> whenever the value is out of date or gets changed.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds (except resetting it to 0).</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     // Skip 0.5 seconds into the animation:
        ///     state.Time = 0.5f;
        ///
        ///     // Skip 50% of the way through the animation (0.5 in a range of 0 to 1):
        ///     state.NormalizedTime = 0.5f;
        ///
        ///     // Skip to the end of the animation and play backwards.
        ///     state.NormalizedTime = 1;
        ///     state.Speed = -1;
        /// }
        /// </code></example>
        /// <summary>
        /// The internal implementation of <see cref="Time"/> which directly gets and sets the underlying value.
        /// </summary>
        /// <remarks>
        /// Setting this value actually calls <see cref="PlayableExtensions.SetTime"/> twice to ensure that animation
        /// events aren't triggered incorrectly. Calling it only once would trigger any animation events between the
        /// previous time and the new time. So if an animation plays to the end and you set the time back to 0 (such as
        /// by calling <see cref="Stop"/> or playing a different animation), the next time that animation played it
        /// would immediately trigger all of its events, then play through and trigger them normally as well.
        /// </remarks>
        /// <summary>
        /// The <see cref="Time"/> of this state as a portion of the animation's <see cref="Length"/>, meaning the
        /// value goes from 0 to 1 as it plays from start to end, regardless of how long that actually takes.
        /// </summary>
        /// 
        /// <remarks>
        /// This value will continue increasing after the animation passes the end of its <see cref="Length"/> while
        /// the animated object either freezes in place or starts again from the beginning according to whether it is
        /// looping or not.
        /// <para></para>
        /// The fractional part of the value (<c>NormalizedTime % 1</c>) is the percentage (0-1) of progress in the
        /// current loop while the integer part (<c>(int)NormalizedTime</c>) is the number of times the animation has
        /// been looped.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed to a value other than 0 in runtime builds.</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     // Skip 0.5 seconds into the animation:
        ///     state.Time = 0.5f;
        ///
        ///     // Skip 50% of the way through the animation (0.5 in a range of 0 to 1):
        ///     state.NormalizedTime = 0.5f;
        ///
        ///     // Skip to the end of the animation and play backwards.
        ///     state.NormalizedTime = 1;
        ///     state.Speed = -1;
        /// }
        /// </code></example>
        /// <summary>Prevents the <see cref="RawTime"/> from being applied.</summary>
        /// <summary>[Pro-Only]
        /// The <see cref="NormalizedTime"/> after which the <see cref="AnimancerEvent.Sequence.OnEnd"/> callback will
        /// be invoked every frame.
        /// </summary>
        /// <remarks>
        /// This is a wrapper around <see cref="AnimancerEvent.Sequence.NormalizedEndTime"/> so that if the value has
        /// not been set (<see cref="float.NaN"/>) it can be determined based on the
        /// <see cref="AnimancerNode.EffectiveSpeed"/>: positive speed ends at 1 and negative speed ends at 0.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds.</em>
        /// </remarks>
        /// <summary>
        /// The number of seconds the animation will take to play fully at its current
        /// <see cref="AnimancerNode.EffectiveSpeed"/>.
        /// </summary>
        /// 
        /// <remarks>
        /// For the time remaining from now until it reaches the end, use <see cref="RemainingDuration"/> instead.
        /// <para></para>
        /// Setting this value modifies the <see cref="AnimancerNode.EffectiveSpeed"/>, not the <see cref="Length"/>.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds.</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     state.Duration = 1;// Play fully in 1 second.
        ///     state.Duration = 2;// Play fully in 2 seconds.
        ///     state.Duration = 0.5f;// Play fully in half a second.
        ///     state.Duration = -1;// Play backwards fully in 1 second.
        ///     state.NormalizedTime = 1; state.Duration = -1;// Play backwards from the end in 1 second.
        /// }
        /// </code></example>
        /// <summary>
        /// The number of seconds this state will take to go from its current <see cref="NormalizedTime"/> to the
        /// <see cref="NormalizedEndTime"/> at its current <see cref="AnimancerNode.EffectiveSpeed"/>.
        /// </summary>
        /// 
        /// <remarks>
        /// For the time it would take to play fully from the start, use the <see cref="Duration"/> instead.
        /// <para></para>
        /// Setting this value modifies the <see cref="AnimancerNode.EffectiveSpeed"/>, not the <see cref="Length"/>.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds.</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     state.RemainingDuration = 1;// Play from the current time to the end in 1 second.
        ///     state.RemainingDuration = 2;// Play from the current time to the end in 2 seconds.
        ///     state.RemainingDuration = 0.5f;// Play from the current time to the end in half a second.
        ///     state.RemainingDuration = -1;// Play from the current time away from the end.
        /// }
        /// </code></example>
        /// <summary>The total time this state would take to play in seconds when <see cref="AnimancerNode.Speed"/> = 1.</summary>
        /// <summary>Will this state loop back to the start when it reaches the end?</summary>
        /// <summary>
        /// Updates the <see cref="AnimancerNode.Weight"/> for fading, applies it to this state's port on the parent
        /// mixer, and plays or pauses the <see cref="Playable"/> if its state is dirty.
        /// </summary>
        /// <remarks>
        /// If the <see cref="Parent"/>'s <see cref="AnimancerNode.KeepChildrenConnected"/> is set to false, this
        /// method will also connect/disconnect this node from the <see cref="Parent"/> in the playable graph.
        /// </remarks>
        /// <summary>Destroys the <see cref="Playable"/> and cleans up this state.</summary>
        /// <remarks>
        /// This method is NOT called automatically, so when implementing a custom state type you must use
        /// <see cref="AnimancerPlayable.Disposables"/> if you need to guarantee that things will get cleaned up.
        /// </remarks>
        /// <summary>[<see cref="IAnimationClipCollection"/>] Gathers all the animations in this state.</summary>
        /// <summary>
        /// Returns true if the animation is playing and has not yet passed the
        /// <see cref="AnimancerEvent.Sequence.endEvent"/>.
        /// </summary>
        /// <remarks>
        /// This method is called by <see cref="IEnumerator.MoveNext"/> so this object can be used as a custom yield
        /// instruction to wait until it finishes.
        /// </remarks>
        /// <summary>
        /// Returns the <see cref="AnimancerNode.DebugName"/> if one is set, otherwise a string describing the type of this
        /// state and the name of the <see cref="MainObject"/>.
        /// </summary>
        /// <summary>[Editor-Only] Returns a custom drawer for this state.</summary>
        /// <inheritdoc/>
        /// <summary>Returns the hierarchy path of this state through its <see cref="Parent"/>s.</summary>
        /// <summary>Appends the hierarchy path of this state through its <see cref="Parent"/>s.</summary>
        /// <summary>Appends "[Index] -> GetType().Name".</summary>
        /// <summary>
        /// Base class for serializable <see cref="ITransition"/>s which can create a particular type of
        /// <see cref="AnimancerState"/> when passed into <see cref="AnimancerPlayable.Play(ITransition)"/>.
        /// </summary>
        /// <remarks>
        /// Unfortunately the tool used to generate this documentation does not currently support nested types with
        /// identical names, so only one <c>Transition</c> class will actually have a documentation page.
        /// <para></para>
        /// Even though it has the <see cref="SerializableAttribute"/>, this class won't actually get serialized
        /// by Unity because it's generic and abstract. Each child class still needs to include the attribute.
        /// <para></para>
        /// Documentation: <see href="https://kybernetik.com.au/animancer/docs/manual/transitions">Transitions</see>
        /// </remarks>
        /// https://kybernetik.com.au/animancer/api/Animancer/Transition_1
        /// 
            /// <summary>[<see cref="SerializeField"/>] The amount of time the transition will take (in seconds).</summary>
            /// <exception cref="ArgumentOutOfRangeException">Thrown when setting the value to a negative number.</exception>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// Indicates what the value of <see cref="AnimancerState.IsLooping"/> will be for the created state.
            /// Returns false unless overridden.
            /// </summary>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// Determines what <see cref="NormalizedTime"/> to start the animation at.
            /// Returns <see cref="float.NaN"/> unless overridden.
            /// </summary>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// Determines how fast the animation plays (1x = normal speed).
            /// Returns 1 unless overridden.
            /// </summary>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// The maximum amount of time the animation is expected to take (in seconds).
            /// </summary>
            /// <remarks>The actual duration can vary in states like <see cref="MixerState"/>.</remarks>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// The <see cref="Motion.averageAngularSpeed"/> that the created state will have.
            /// </summary>
            /// <remarks>The actual average velocity can vary in states like <see cref="MixerState"/>.</remarks>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// The <see cref="Motion.averageSpeed"/> that the created state will have.
            /// </summary>
            /// <remarks>The actual average velocity can vary in states like <see cref="MixerState"/>.</remarks>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <remarks>This property returns the <see cref="AnimancerEvent.Sequence.Serializable.Sequence"/>.</remarks>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// <para></para>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// <see cref="State"/> is simply a shorthand for casting this to <typeparamref name="TState"/>.
            /// </summary>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// </summary>
            /// 
            /// <remarks>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// This property is shorthand for casting the <see cref="BaseState"/> to <typeparamref name="TState"/>.
            /// </remarks>
            /// 
            /// <exception cref="InvalidCastException">
            /// The <see cref="BaseState"/> is not actually a <typeparamref name="TState"/>. This should only
            /// happen if a different type of state was created by something else and registered using the
            /// <see cref="Key"/>, causing this <see cref="AnimancerPlayable.Play(ITransition)"/> to pass that
            /// state into <see cref="Apply"/> instead of calling <see cref="CreateState"/> to make the correct type of
            /// state.
            /// </exception>
            /// <summary>Indicates whether this transition can create a valid <see cref="AnimancerState"/>.</summary>
            /// <summary>The <see cref="AnimancerState.Key"/> which the created state will be registered with.</summary>
            /// <remarks>Returns <c>this</c> unless overridden.</remarks>
            /// <summary>
            /// When a transition is passed into <see cref="AnimancerPlayable.Play(ITransition)"/>, this property
            /// determines which <see cref="Animancer.FadeMode"/> will be used.
            /// </summary>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>[<see cref="ITransition"/>]
            /// Sets the <see cref="BaseState"/> and applies any other modifications to the `state`.
            /// </summary>
            /// <remarks>
            /// Called by <see cref="AnimancerPlayable.Play(ITransition)"/>.
            /// <para></para>
            /// This method also clears the <see cref="State"/> if necessary, so it will re-cast the
            /// <see cref="BaseState"/> when it gets accessed again.
            /// </remarks>
            /// <summary>The <see cref="AnimancerState.MainObject"/> that the created state will have.</summary>
            /// <summary>The display name of this transition.</summary>
            /// <summary>Returns the <see cref="Name"/> and type of this transition.</summary>
            /// <summary>[Editor-Only] Don't use Inspector Gadgets Nested Object Drawers.</summary>
</function_comments>
</function_info>
<function_info>
函数名: OnSetIsPlaying
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 301
</function_info>
<function_info>
函数名: OnStartFade
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 370
</function_info>
<function_info>
函数名: Parent
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 77
<function_comments>
        /// <summary>Connects this state to the `parent` mixer at the specified `index`.</summary>
        /// <remarks>
        /// Use <see cref="AnimancerLayer.AddChild(AnimancerState)"/> instead of this method to connect a state to an
        /// available port on a layer.
        /// </remarks>
</function_comments>
</function_info>
<function_info>
函数名: Play
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 336
</function_info>
<function_info>
函数名: RawTime
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 497
</function_info>
<function_info>
函数名: RemainingDuration
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 688
</function_info>
<function_info>
函数名: SerializedEvents
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1049
<function_comments>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// <para></para>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// <see cref="State"/> is simply a shorthand for casting this to <typeparamref name="TState"/>.
            /// </summary>
</function_comments>
</function_info>
<function_info>
函数名: SetParent
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 85
</function_info>
<function_info>
函数名: SetRoot
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 38
</function_info>
<function_info>
函数名: Speed
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1011
</function_info>
<function_info>
函数名: State
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1089
</function_info>
<function_info>
函数名: Stop
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 354
</function_info>
<function_info>
函数名: Time
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 441
</function_info>
<function_info>
函数名: ToString
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1174
</function_info>
<function_info>
函数名: ToString
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 828
</function_info>
<function_info>
函数名: Transition
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 968
<function_comments>
            /// <summary>[<see cref="SerializeField"/>] The amount of time the transition will take (in seconds).</summary>
            /// <exception cref="ArgumentOutOfRangeException">Thrown when setting the value to a negative number.</exception>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// Indicates what the value of <see cref="AnimancerState.IsLooping"/> will be for the created state.
            /// Returns false unless overridden.
            /// </summary>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// Determines what <see cref="NormalizedTime"/> to start the animation at.
            /// Returns <see cref="float.NaN"/> unless overridden.
            /// </summary>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// Determines how fast the animation plays (1x = normal speed).
            /// Returns 1 unless overridden.
            /// </summary>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// The maximum amount of time the animation is expected to take (in seconds).
            /// </summary>
            /// <remarks>The actual duration can vary in states like <see cref="MixerState"/>.</remarks>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// The <see cref="Motion.averageAngularSpeed"/> that the created state will have.
            /// </summary>
            /// <remarks>The actual average velocity can vary in states like <see cref="MixerState"/>.</remarks>
            /// <summary>[<see cref="ITransitionDetailed"/>]
            /// The <see cref="Motion.averageSpeed"/> that the created state will have.
            /// </summary>
            /// <remarks>The actual average velocity can vary in states like <see cref="MixerState"/>.</remarks>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <remarks>This property returns the <see cref="AnimancerEvent.Sequence.Serializable.Sequence"/>.</remarks>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// <para></para>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// <see cref="State"/> is simply a shorthand for casting this to <typeparamref name="TState"/>.
            /// </summary>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// </summary>
            /// 
            /// <remarks>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// This property is shorthand for casting the <see cref="BaseState"/> to <typeparamref name="TState"/>.
            /// </remarks>
            /// 
            /// <exception cref="InvalidCastException">
            /// The <see cref="BaseState"/> is not actually a <typeparamref name="TState"/>. This should only
            /// happen if a different type of state was created by something else and registered using the
            /// <see cref="Key"/>, causing this <see cref="AnimancerPlayable.Play(ITransition)"/> to pass that
            /// state into <see cref="Apply"/> instead of calling <see cref="CreateState"/> to make the correct type of
            /// state.
            /// </exception>
            /// <summary>Indicates whether this transition can create a valid <see cref="AnimancerState"/>.</summary>
            /// <summary>The <see cref="AnimancerState.Key"/> which the created state will be registered with.</summary>
            /// <remarks>Returns <c>this</c> unless overridden.</remarks>
            /// <summary>
            /// When a transition is passed into <see cref="AnimancerPlayable.Play(ITransition)"/>, this property
            /// determines which <see cref="Animancer.FadeMode"/> will be used.
            /// </summary>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>Creates and returns a new <typeparamref name="TState"/>.</summary>
            /// <remarks>
            /// Note that using methods like <see cref="AnimancerPlayable.Play(ITransition)"/> will also call
            /// <see cref="Apply"/>, so if you call this method manually you may want to call that method as well. Or you
            /// can just use <see cref="AnimancerUtilities.CreateStateAndApply"/>.
            /// </remarks>
            /// <summary>[<see cref="ITransition"/>]
            /// Sets the <see cref="BaseState"/> and applies any other modifications to the `state`.
            /// </summary>
            /// <remarks>
            /// Called by <see cref="AnimancerPlayable.Play(ITransition)"/>.
            /// <para></para>
            /// This method also clears the <see cref="State"/> if necessary, so it will re-cast the
            /// <see cref="BaseState"/> when it gets accessed again.
            /// </remarks>
            /// <summary>The <see cref="AnimancerState.MainObject"/> that the created state will have.</summary>
            /// <summary>The display name of this transition.</summary>
            /// <summary>Returns the <see cref="Name"/> and type of this transition.</summary>
            /// <summary>[Editor-Only] Don't use Inspector Gadgets Nested Object Drawers.</summary>
</function_comments>
</function_info>
<function_info>
函数名: Update
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 718
</function_info>
<function_info>
函数名: _Events
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1038
<function_comments>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <remarks>This property returns the <see cref="AnimancerEvent.Sequence.Serializable.Sequence"/>.</remarks>
            /// <summary>[<see cref="SerializeField"/>] [<see cref="ITransitionDetailed"/>]
            /// Events which will be triggered as the animation plays.
            /// </summary>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// <para></para>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// <see cref="State"/> is simply a shorthand for casting this to <typeparamref name="TState"/>.
            /// </summary>
</function_comments>
</function_info>
<function_info>
函数名: _FadeDuration
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 973
<function_comments>
            /// <summary>[<see cref="SerializeField"/>] The amount of time the transition will take (in seconds).</summary>
            /// <exception cref="ArgumentOutOfRangeException">Thrown when setting the value to a negative number.</exception>
</function_comments>
</function_info>
<function_info>
函数名: _IsPlaying
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 245
<function_comments>
        /// <summary>Has <see cref="_IsPlaying"/> changed since it was last applied to the <see cref="Playable"/>.</summary>
        /// <remarks>
        /// Playables start playing by default so we start dirty to pause it during the first update (unless
        /// <see cref="IsPlaying"/> is set to true before that).
        /// </remarks>
        /// <summary>Is the <see cref="Time"/> automatically advancing?</summary>
        ///
        /// <example><code>
        /// void IsPlayingExample(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.States.GetOrCreate(clip);
        ///
        ///     if (state.IsPlaying)
        ///         Debug.Log(clip + " is playing");
        ///     else
        ///         Debug.Log(clip + " is paused");
        ///
        ///     state.IsPlaying = false;// Pause the animation.
        ///
        ///     state.IsPlaying = true;// Unpause the animation.
        /// }
</function_comments>
</function_info>
<function_info>
函数名: _IsPlayingDirty
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 252
<function_comments>
        /// <summary>Is the <see cref="Time"/> automatically advancing?</summary>
        ///
        /// <example><code>
        /// void IsPlayingExample(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.States.GetOrCreate(clip);
        ///
        ///     if (state.IsPlaying)
        ///         Debug.Log(clip + " is playing");
        ///     else
        ///         Debug.Log(clip + " is paused");
        ///
        ///     state.IsPlaying = false;// Pause the animation.
        ///
        ///     state.IsPlaying = true;// Unpause the animation.
        /// }
</function_comments>
</function_info>
<function_info>
函数名: _Key
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 176
<function_comments>
        /// <summary>
        /// The object used to identify this state in the root <see cref="AnimancerPlayable.States"/> dictionary.
        /// Can be null.
        /// </summary>
</function_comments>
</function_info>
<function_info>
函数名: _MustSetTime
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 403
<function_comments>
        /// <summary>
        /// The <see cref="AnimancerPlayable.FrameID"/> from when the <see cref="Time"/> was last retrieved from the
        /// <see cref="Playable"/>.
        /// </summary>
        /// <summary>The number of seconds that have passed since the start of this animation.</summary>
        ///
        /// <remarks>
        /// This value will continue increasing after the animation passes the end of its <see cref="Length"/> while
        /// the animated object either freezes in place or starts again from the beginning according to whether it is
        /// looping or not.
        /// <para></para>
        /// This property internally uses <see cref="RawTime"/> whenever the value is out of date or gets changed.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds (except resetting it to 0).</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     // Skip 0.5 seconds into the animation:
        ///     state.Time = 0.5f;
        ///
        ///     // Skip 50% of the way through the animation (0.5 in a range of 0 to 1):
        ///     state.NormalizedTime = 0.5f;
        ///
        ///     // Skip to the end of the animation and play backwards.
        ///     state.NormalizedTime = 1;
        ///     state.Speed = -1;
        /// }
</function_comments>
</function_info>
<function_info>
函数名: _Parent
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 78
<function_comments>
        /// <summary>Connects this state to the `parent` mixer at the specified `index`.</summary>
        /// <remarks>
        /// Use <see cref="AnimancerLayer.AddChild(AnimancerState)"/> instead of this method to connect a state to an
        /// available port on a layer.
        /// </remarks>
</function_comments>
</function_info>
<function_info>
函数名: _State
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 1067
<function_comments>
            /// <summary>
            /// The state that was created by this object. Specifically, this is the state that was most recently
            /// passed into <see cref="Apply"/> (usually by <see cref="AnimancerPlayable.Play(ITransition)"/>).
            /// </summary>
            /// 
            /// <remarks>
            /// You can use <see cref="AnimancerPlayable.StateDictionary.GetOrCreate(ITransition)"/> or
            /// <see cref="AnimancerLayer.GetOrCreateState(ITransition)"/> to get or create the state for a
            /// specific object.
            /// <para></para>
            /// This property is shorthand for casting the <see cref="BaseState"/> to <typeparamref name="TState"/>.
            /// </remarks>
            /// 
            /// <exception cref="InvalidCastException">
            /// The <see cref="BaseState"/> is not actually a <typeparamref name="TState"/>. This should only
            /// happen if a different type of state was created by something else and registered using the
            /// <see cref="Key"/>, causing this <see cref="AnimancerPlayable.Play(ITransition)"/> to pass that
            /// state into <see cref="Apply"/> instead of calling <see cref="CreateState"/> to make the correct type of
            /// state.
            /// </exception>
</function_comments>
</function_info>
<function_info>
函数名: _Time
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 388
<function_comments>
        /// <summary>
        /// Indicates whether the <see cref="_Time"/> needs to be assigned to the <see cref="Playable"/> next update.
        /// </summary>
        /// <remarks>
        /// <see cref="EventDispatcher"/> executes after all other playables, at which point changes can still be made to
        /// their time but not their weight which means that if we set the time immediately then it can be out of sync
        /// with the weight. For example, if an animation ends and you play another, the first animation would be
        /// stopped and rewinded to the start but would still be at full weight so it would show its first frame before
        /// the new animation actually takes effect (even if the previous animation was not looping).
        /// <para></para>
        /// So instead, we simply delay setting the actual playable time until the next update so that time and weight
        /// are always in sync.
        /// </remarks>
        /// <summary>
        /// The <see cref="AnimancerPlayable.FrameID"/> from when the <see cref="Time"/> was last retrieved from the
        /// <see cref="Playable"/>.
        /// </summary>
        /// <summary>The number of seconds that have passed since the start of this animation.</summary>
        ///
        /// <remarks>
        /// This value will continue increasing after the animation passes the end of its <see cref="Length"/> while
        /// the animated object either freezes in place or starts again from the beginning according to whether it is
        /// looping or not.
        /// <para></para>
        /// This property internally uses <see cref="RawTime"/> whenever the value is out of date or gets changed.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds (except resetting it to 0).</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     // Skip 0.5 seconds into the animation:
        ///     state.Time = 0.5f;
        ///
        ///     // Skip 50% of the way through the animation (0.5 in a range of 0 to 1):
        ///     state.NormalizedTime = 0.5f;
        ///
        ///     // Skip to the end of the animation and play backwards.
        ///     state.NormalizedTime = 1;
        ///     state.Speed = -1;
        /// }
</function_comments>
</function_info>
<function_info>
函数名: _TimeFrameID
文件路径: D:/Unity/jyx2/Assets/3rd/Animancer/Internal/Core/AnimancerState.cs, 行号: 409
<function_comments>
        /// <summary>The number of seconds that have passed since the start of this animation.</summary>
        ///
        /// <remarks>
        /// This value will continue increasing after the animation passes the end of its <see cref="Length"/> while
        /// the animated object either freezes in place or starts again from the beginning according to whether it is
        /// looping or not.
        /// <para></para>
        /// This property internally uses <see cref="RawTime"/> whenever the value is out of date or gets changed.
        /// <para></para>
        /// <em>Animancer Lite does not allow this value to be changed in runtime builds (except resetting it to 0).</em>
        /// </remarks>
        ///
        /// <example><code>
        /// void PlayAnimation(AnimancerComponent animancer, AnimationClip clip)
        /// {
        ///     var state = animancer.Play(clip);
        ///
        ///     // Skip 0.5 seconds into the animation:
        ///     state.Time = 0.5f;
        ///
        ///     // Skip 50% of the way through the animation (0.5 in a range of 0 to 1):
        ///     state.NormalizedTime = 0.5f;
        ///
        ///     // Skip to the end of the animation and play backwards.
        ///     state.NormalizedTime = 1;
        ///     state.Speed = -1;
        /// }
</function_comments>
</function_info>
</file_info>

2024-12-15 16:15:21,823 - INFO Retriever 0 - 

————————————————————————————————————————————————————————————————
2024-12-15 16:15:21,824 - INFO Retriever 0 - 当前窗口总长度：19
2024-12-15 16:15:21,824 - INFO Retriever 0 - 当前更新窗口长度：10
2024-12-15 16:15:21,824 - INFO Retriever 0 - 当前更新窗口长度：10
2024-12-15 16:15:21,825 - INFO Retriever 0 - ————————————————————————————————————————————————————————————————


2024-12-15 16:15:37,517 - INFO Retriever 0 - Agent主脑给出的回答为：{
    "deep_think": {
        "thoughts": "在阅读了`AnimancerState.cs`文件的内容后，我发现该文件定义了一个抽象类，它是`Animancer`框架中所有状态的基础。这个类负责管理动画的播放状态，包括播放、暂停、停止、时间控制以及与其他动画状态的交互。虽然该文件与动画管理紧密相关，但并没有直接涉及到指定角色战斗动画为固定的逻辑。因此，我们可以排除修改该文件来达到指定角色战斗动画为固定的目的。\n\n根据之前的分析，`RoleInstance.cs`文件中包含了与角色战斗动画相关的逻辑，特别是`SwitchAnimationToSkill`函数，该函数负责将角色的动画切换到当前技能对应的动画。如果需要将某个角色的所有战斗动画固定，而不是跟随技能招式变化，可能需要修改这个函数的逻辑，使其不再根据技能来切换动画，而是使用一个固定的动画。\n\n综上所述，为了实现指定角色战斗动画为固定的需求，我们需要修改`RoleInstance.cs`文件中的`SwitchAnimationToSkill`函数。"
    }
}
2024-12-15 16:15:37,518 - INFO Retriever 0 - 是否成功解析：True
2024-12-15 16:15:37,518 - INFO Retriever 0 - operation_type (__det_dir_action):
2024-12-15 16:15:37,518 - INFO Retriever 0 - deep_think
2024-12-15 16:15:37,519 - INFO Retriever 0 - 

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
2024-12-15 16:15:37,519 - INFO Retriever 0 - Assistant:
2024-12-15 16:15:37,519 - INFO Retriever 0 - {
    "deep_think": {
        "thoughts": "在阅读了`AnimancerState.cs`文件的内容后，我发现该文件定义了一个抽象类，它是`Animancer`框架中所有状态的基础。这个类负责管理动画的播放状态，包括播放、暂停、停止、时间控制以及与其他动画状态的交互。虽然该文件与动画管理紧密相关，但并没有直接涉及到指定角色战斗动画为固定的逻辑。因此，我们可以排除修改该文件来达到指定角色战斗动画为固定的目的。\n\n根据之前的分析，`RoleInstance.cs`文件中包含了与角色战斗动画相关的逻辑，特别是`SwitchAnimationToSkill`函数，该函数负责将角色的动画切换到当前技能对应的动画。如果需要将某个角色的所有战斗动画固定，而不是跟随技能招式变化，可能需要修改这个函数的逻辑，使其不再根据技能来切换动画，而是使用一个固定的动画。\n\n综上所述，为了实现指定角色战斗动画为固定的需求，我们需要修改`RoleInstance.cs`文件中的`SwitchAnimationToSkill`函数。"
    }
}
2024-12-15 16:15:37,519 - INFO Retriever 0 - dict_keys(['deep_think'])
2024-12-15 16:15:37,520 - INFO Retriever 0 - Agent主脑给出的行动：deep_think
参数：{'thoughts': '在阅读了`AnimancerState.cs`文件的内容后，我发现该文件定义了一个抽象类，它是`Animancer`框架中所有状态的基础。这个类负责管理动画的播放状态，包括播放、暂停、停止、时间控制以及与其他动画状态的交互。虽然该文件与动画管理紧密相关，但并没有直接涉及到指定角色战斗动画为固定的逻辑。因此，我们可以排除修改该文件来达到指定角色战斗动画为固定的目的。\n\n根据之前的分析，`RoleInstance.cs`文件中包含了与角色战斗动画相关的逻辑，特别是`SwitchAnimationToSkill`函数，该函数负责将角色的动画切换到当前技能对应的动画。如果需要将某个角色的所有战斗动画固定，而不是跟随技能招式变化，可能需要修改这个函数的逻辑，使其不再根据技能来切换动画，而是使用一个固定的动画。\n\n综上所述，为了实现指定角色战斗动画为固定的需求，我们需要修改`RoleInstance.cs`文件中的`SwitchAnimationToSkill`函数。', 'repeat_counter': 1, 'continue_think_counter': 1}
2024-12-15 16:15:37,520 - INFO Retriever 0 - Observer: 好的，请继续你的下一步行动或思考。
2024-12-15 16:15:37,523 - INFO Retriever 0 - 

————————————————————————————————————————————————————————————————
2024-12-15 16:15:37,523 - INFO Retriever 0 - 当前窗口总长度：21
2024-12-15 16:15:37,523 - INFO Retriever 0 - 当前更新窗口长度：12
2024-12-15 16:15:37,523 - INFO Retriever 0 - 当前更新窗口长度：12
2024-12-15 16:15:37,523 - INFO Retriever 0 - ————————————————————————————————————————————————————————————————


2024-12-15 16:16:01,349 - INFO Retriever 0 - Agent主脑给出的回答为：{
    "finish": "我已完成你所给出的任务需求，请你进行确认"
}
2024-12-15 16:16:01,350 - INFO Retriever 0 - 是否成功解析：True
2024-12-15 16:16:01,350 - INFO Retriever 0 - operation_type (__det_dir_action):
2024-12-15 16:16:01,351 - INFO Retriever 0 - finish
2024-12-15 16:16:01,351 - INFO Retriever 0 - 

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
2024-12-15 16:16:01,351 - INFO Retriever 0 - Assistant:
2024-12-15 16:16:01,351 - INFO Retriever 0 - {
    "finish": "我已完成你所给出的任务需求，请你进行确认"
}
2024-12-15 16:16:01,352 - INFO Retriever 0 - dict_keys(['finish'])
2024-12-15 16:16:01,353 - INFO Retriever 0 - ——————————————————————————————————— 任务结束 ———————————————————————————————————
2024-12-15 16:16:01,353 - INFO Retriever 0 - 

————————————————————————————————————————————————————————————————
2024-12-15 16:16:01,353 - INFO Retriever 0 - 当前窗口总长度：21
2024-12-15 16:16:01,353 - INFO Retriever 0 - 当前更新窗口长度：12
2024-12-15 16:16:01,354 - INFO Retriever 0 - 当前更新窗口长度：12
2024-12-15 16:16:01,354 - INFO Retriever 0 - ————————————————————————————————————————————————————————————————


2024-12-15 16:17:06,904 - INFO Retriever 0 - -------------------------Task Report-------------------------
2024-12-15 16:17:06,904 - INFO Retriever 0 - * 文件一：
    * 文件绝对路径：D:\Unity\jyx2\Assets\Scripts\GameSave\RoleInstance.cs
    * 文件内容概述：该脚本定义了`RoleInstance`类，作为金庸群侠传3D重制版中角色的核心模型，包含了角色的属性、技能和装备信息，并提供了属性管理、技能学习、装备使用、战斗状态处理等功能。
    * 该文件与问题目标之间的关联性：由于该脚本涉及到角色的技能和战斗状态处理，很可能包含了指定角色战斗动画的逻辑。需要进一步检查该脚本中是否有关于动画的设置和修改。

* 文件二：
    * 文件绝对路径：D:\Unity\jyx2\Assets\3rd\Animancer\Internal\Core\AnimancerState.cs
    * 文件内容概述：该脚本定义了`AnimancerState`类，作为`Animancer`框架中所有动画状态的基础，负责管理动画的播放、暂停、时间控制等。
    * 该文件与问题目标之间的关联性：由于该脚本直接涉及到动画状态的管理，很可能包含了指定角色战斗动画的逻辑。需要进一步检查该脚本中是否有关于动画的设置和修改。

* 文件三：
    * 文件绝对路径：D:\Unity\jyx2\Assets\Scripts\BattleField\AIResult.cs
    * 文件内容概述：该脚本文件包含`AIResult`和`SkillCastResult`两个类，分别负责记录和比较AI行为以及处理技能施放的具体结果。
    * 该文件与问题目标之间的关联性：虽然该脚本涉及到AI行为和技能施放，但与指定角色战斗动画的逻辑关系不大，因此可以排除。

* 文件四：
    * 文件绝对路径：D:\Unity\jyx2\Assets\Mods\JYX2\Lua\ka363.lua
    * 文件内容概述：该Lua脚本控制游戏中的特定场景，包含场景切换、角色对话、物品添加和事件修改等功能。
    * 该文件与问题目标之间的关联性：该脚本与指定角色战斗动画的逻辑关系不大，因此可以排除。
2024-12-15 16:17:06,905 - INFO Retriever 0 - 
Token Consuming:259946

2024-12-15 16:17:06,905 - INFO Retriever 0 - 
history rounds:11

